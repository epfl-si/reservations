#!/usr/bin/perl
#
#  [ res ]
#
#  Reservation des salles de conferences - fichier racine
#    necessite aussi le fichier res/restr.pl
#
#  Copyright 1995-2010 Ecole Polytechnique Federale de Lausanne (EPFL)
#  Author:  Ion CIONCA [cionca@epfl.ch Oct 1995]
#  				update [cionca@epfl.ch Mar 2010]
#

use lib '/opt/dinfo/lib/perl';
use lib '/var/www/vhosts/reservations.epfl.ch/cgi-bin';

use utf8;
use DBI;
use GD::Simple;
use File::stat;
use File::Temp;
use Mail::Sendmail;
use Data::Dumper;

use Cadi::Groups;
use Tequila::Client;

binmode (STDOUT, ':utf8');

$ENV {SERVER_NAME} = $ENV {SITE_URL} if ($ENV {SERVER_NAME} eq '127.0.0.1' && $ENV {SITE_URL});
require 'res-tools.pl';

#---------------------------------------------------------
my $version	   = 'Mar 2020';
#---------------------------------------------------------

$URLres				= "${RES_HOME}/cgi-bin/res";
$URLplan			= "https://plan.epfl.ch/";
$support			= '1234@epfl.ch';
$generic_mail	= 'noreply@epfl.ch';
$TITLE      	= 'Réservations en ligne ';
my $mapsdir		=  qq{${abs_path}htdocs/.maps/};

@color_list = (
	    ['cadetblue', 	'white'],
	    ['skyblue',		'white'],
	    ['wheat',		'black'],
	    ['mediumseagreen', 'white'],
	    ['purple', 		'white'],
	    ['darkslategray',	'white'],
	    ['slateblue', 		'white'],
	    ['dodgerblue', 		'white'],
	    ['steelblue', 		'white'],
	    ['lightsteelblue', 	'white'],
	    ['forestgreen', 	'white'],
	    ['darkkhaki', 		'white'],
	    ['darkgoldenrod', 	'white'],
	    ['saddlebrown', 	'white'],
	    ['chocolate', 		'white'],
	    ['firebrick', 		'white'],
	    ['deeppink', 		'white'],
	    ['palevioletred',	'white'],

	);

$name_col 			= 120;   # ---- largeur colonne noms salles
$width_WD 			= 670;	 # ---- largeur fenetre
$DEBUT 					= '07';	 # ---- heure debut reservations
$FIN   					= '22';	 # ---- heure fin reservations
$res_hours  		= '15';  # ---- plage d'affichage des reservations 
$week_day_width = 75;
$nom_salle_len	= 19;
@obj_acces			= ('public','restreint','indisponible');

#-------------------
$DEBUG = -f '/opt/dinfo/etc/MASTER' ? 0 : 1;

if ($DEBUG) {
	$ABS_HOME = 'https://test-absences.epfl.ch';
	$RES_HOME = 'https://test-reservations.epfl.ch';
	$URLres	  = "${RES_HOME}/cgi-bin/res";
}

my $NOTIFYUSER 	= 0;
my $USE_CALLBACK= 1;

#	---------
$login_as 			= '118873';
$login_as 			= '276008';
$login_as 			= '276008';
$login_as 			= '136108';
$login_as 			= '140973';
$login_as 			= '109324';
$login_as 			= '140973';
$login_as 			= '112215';
#	---------
	
%CONTENTS  			= &loadargs ();

use vars qw( $allObjects $allUnitsUsers @allunits $userObjects $res $dinfo $dbh @salles $image_dir $logfile $gwidth $ghight $Admins @commonUsers @commonUnits);

 my $superusers = '104782,107490';	#	- ic, nr, cl

 &get_time ();

# $dbh   = dbconnect ('reservations');
 $dbh = new Cadi::CadiDB (
	  dbname => 'reservations',
#		utf8 => 1,
 ) unless $dbh;
 erreur ("FATAL DB ACCESS") unless $dbh;

 $db_dinfo = new Cadi::CadiDB (
	  dbname => 'dinfo',
		utf8 => 1,
 ) unless $db_dinfo;
 erreur ("FATAL DB ACCESS") unless $db_dinfo;
 my $Groupes = new Cadi::Groups (
 	caller => '104782', 
 );
    
my $LAST_DATE  = get_next_n_day($crt_date, 730);	# - res max 2 ans à l'avance

list_res ()  if $pathinfo =~ /^\/list_res/;

unless ($pathinfo) {
  unless ($CONTENTS{login}) {
		unless (isAuth ()) {	#	- consultation simple
			initData ();
			main () ;
		}
  }
};

auth () if $CONTENTS{login};

if ($pathinfo =~ /^\/graph/) {
  unless (isAuth ()) {	#	- consultation simple
		initData ();
		graph () ;
	}
};

if ($pathinfo =~ /^\/search/) {
	auth () if isAuth ();
	initData ();
	search () ;
};

if ($pathinfo =~ /^\/cons_obj/) {
	unless (isAuth ()) {	#	- consultation simple
		initData ();
		cons_obj () ;
	}
};

auth() ;

initData ();

dispatch ();

exit;

#----
sub initData {

	&header ()   unless $pathinfo =~ /(^\/extract|^\/image|^\/flag_mail|^\/ical)/;
	
	getObjects ();

	load_dinfo ();

	getUserData ($CONTENTS{sciper});

	foreach my $objID (keys %$allObjects) {
		$userObjects->{$objID}->{objdata} =  $allObjects->{$objID}->{objdata} if (exists $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}})
	}

	checkDB ();

# - maintenance
	$MAINTENANCE = '';
	if ($MAINTENANCE) {
		unless ($ENV{REMOTE_ADDR} eq '128.178.1.146') {
			erreur ("Le service de gestion des réservations est en maintenance");
		}
	}

}

#-------
sub dispatch {

	if ($pathinfo =~ /^\/disp_res/)		{ 	
		&disp_res ();
		&footpage ();
	}
	&add_res   	  if $pathinfo =~ /^\/add_res/;
	&chp_done	   	if $pathinfo =~ /^\/chp_done/;
	&cons_obj  	  if $pathinfo =~ /^\/cons_obj/;
	&cons_res  	  if $pathinfo =~ /^\/cons_res/;
	&done_obj 	  if $pathinfo =~ /^\/done_obj/  	;
	&done_res 	  if $pathinfo =~ /^\/done_res/  	;
	&extract 	   	if $pathinfo =~ /^\/extract/  	;
	&flag_mail	  if $pathinfo =~ /^\/flag_mail/;
	&ges_user	   	if $pathinfo =~ /^\/ges_user/;
	&gestion 	   	if $pathinfo =~ /^\/gestion/;
	&graph 		  	if $pathinfo =~ /^\/graph/;
	&help  		   	if $pathinfo =~ /^\/hel/;
	&ical	 	   			if $pathinfo =~ /^\/ical/;
	&image	 	   		if $pathinfo =~ /^\/image/;
	&import_users   if $pathinfo =~ /^\/import_users/;
	&listconflicts  if $pathinfo =~ /^\/listconflicts/;
	&listcontacts   if $pathinfo =~ /^\/listcontacts/;
	&listobj	   		if $pathinfo =~ /^\/listobj/	;
	&listres	   		if $pathinfo =~ /^\/listres/	;
	&logs		   	 		if $pathinfo =~ /^\/logs/	;
	&maj_obj 	   		if $pathinfo =~ /^\/maj_obj/	;
	&mod_res 	   		if $pathinfo =~ /^\/mod_res/;
	&news  		   		if $pathinfo =~ /^\/news/;
	&popup 		   		if $pathinfo =~ /^\/popup/;
	&register	   		if $pathinfo =~ /^\/register/;
	&search		   		if $pathinfo =~ /^\/search/;
	&pool_dispo	   	if $pathinfo =~ /^\/pool_dispo/;
	&maj_token	   	if $pathinfo =~ /^\/maj_token/;
	&getUserAccreds if $pathinfo =~ /^\/getUserAccreds/;

	&majCallBack	  if $pathinfo =~ /^\/majCallBack/;

	&main ();

}

#_________
sub pool_dispo {

	my $date1 	= check_date($CONTENTS{date1});
	my $date2 	= check_date($CONTENTS{date2});
	erreur ("date début après date de fin") if $date1 gt $date2;
	erreur ("identificateur de ressource absent") unless $CONTENTS{objID};
	my $objID = $CONTENTS{objID};
    my $obj 	= $allObjects->{$objID}->{objdata};
    erreur("ressource pas trouvée") unless $obj;
	my @crt_res = getAllRes ($date1, $date2, $objID);

	print qq{
	<h3>Ressource/salle</h3>
	<div style="margin-left: 20px;">
	<b>Nom :</b> $obj->{nom}<br>
	<b>Description : </b>$obj->{descr}<br>
	<b>Taille pool : </b>$obj->{pool} objets<br>
	Nb max d'objets par réservation : $obj->{max_pool}<br>
	</div>
	<h4>Disponibilité par date et heure</h4>
	};
	
	print qq{<div style="width: 600px; border-bottom: 1px solid #aaaaaa; margin: 4px; ">
			<div style="float: left; width: 70px; background: #eeeeee;">Date</div>
	};
	my $starth = $DEBUT; 
	   $starth =~ s/^0//;
	for ( my $hour = $starth; $hour <= $FIN; $hour++ ) {
		my $tmph   = sprintf "%02d", $hour;
		print qq{<div style="float: left; width: 30px; font-weight: bold;  text-align: center;">$hour</div>};
	}
	print qq{</div>
			<div class="clear both"></div>
	};

	for (my $date = $date1; $date le $date2; $date = get_next_n_day ($date, 1)) {
		my $starth = $DEBUT; 
		   $starth =~ s/^0//;
		print qq{<div style="width: 600px; border-bottom: 1px solid #aaaaaa; margin: 4px; ">
			<div style="float: left; width: 70px; background: #eeeeee;">}.rev_date($date).qq{</div>
		};
		
		my $dispo 	= $obj->{pool};
		for ( my $hour = $starth; $hour <= $FIN; $hour++ ) {
			my $tmph   = sprintf "%02d", $hour;
			foreach my $res (@crt_res) {
				$res->{date} =~ s/\-//g;
				next if $res->{date} ne $date;
				if ($res->{hdeb} le $tmph and $tmph le $res->{hfin}) {
					unless ($res->{id}->{done}) {
						$dispo -= $res->{pool};
						$res->{id}->{done} = 1;
					}
				} else {
					if ($res->{id}->{done}) {
						$dispo += $res->{pool};
						$res->{id}->{done} = '';
					}
				}
			}
			
			my $dispo_txt = qq{<span style="color:orange;">$dispo</span>} 	if $dispo < int($obj->{pool}/2);
			   $dispo_txt = qq{<span style="color:green;">$dispo</span>} 	if $dispo >= int($obj->{pool}/2);
			   $dispo_txt = qq{<span style="color:red;">$dispo</span>} 		if $dispo == 0;
			
			print qq{<div style="float: left; width: 30px; text-align: center;"> $dispo_txt </div>};
		}
		print qq{
			<div class="clear both"></div>
			</div>
			<div class="clear both"></div>
		};
	}

	footpage ();
	
}

#_________
sub list_res {

	print qq{Content-Type: text/html; charset=utf-8\n\n};

	print qq{
	<html>
	<script src="/CalendarPopup.js" type="text/javascript"></script>
	<body>};

	unless ($CONTENTS{objects} =~ m/[0-9,]/) {
		warn "--> res :: list_res : ** WARN : illegal params";
		exit ;
	}
	
	if ($CONTENTS{date}) {
		unless ($CONTENTS{date} =~ m#[0-9/]#) {
			warn "--> res :: list_res : ** WARN : illegal params";
			exit ;
		}
	}
	
	$dbh = new Cadi::CadiDB (
		dbname => 'reservations',
	) unless $dbh;
	erreur ("FATAL DB ACCESS") unless $dbh;
 	
	$objID = $CONTENTS{objects};

	$userObjects = getObj ($CONTENTS{objects});

	my $date;
	if ($CONTENTS{date}) {
		$date = &check_date($CONTENTS{date});
	} else {
		$date = $crt_date;
	}
	
   my ($start_we, $end_we) = split (/\t/, &get_start_end_week($date));
   $end_we = &get_next_n_day($end_we,2);

   my $next_week = rev_date(get_next_n_day($end_we, 1));
   my $prev_week = rev_date(get_prev_n_day($start_we, 2));
   
   my $date = $CONTENTS{date} ? $CONTENTS{date} : rev_date($crt_date);
   
   print qq{
   	<form action="$URLres/list_res?objects=$CONTENTS{objects}" name="form" method="post">
   	semaine : <a href=$URLres/list_res?objects=$CONTENTS{objects}&date=$prev_week>précédente</a> | <a href=$URLres/list_res?objects=$CONTENTS{objects}&date=$next_week>suivante</a> - choisir une date :
		<input name="date" id="date" size="10" value="$date">
		<a href="#" onClick="cal.select(document.getElementById('date'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1">
		<img src="/images/cal.gif" border="0"></a>
	<input type="submit" name="go" value="afficher">
	</form>
   };
   
   &listRes ($start_we, $end_we, $objID,'',1);

	print qq{</body></html>};
   
   exit;
	
}

#_________
sub auth {

	return if $pathinfo =~ /^\/getUserAccreds/;

  unless ($tequila) {
    $tequila = new Tequila::Client (
	  service    => 'Réservations',
	  request    => [ 'name','firstname','uniqueid','where' ],
	  identities => 'any',
	  urlaccess  => "https://$ENV{SERVER_NAME}$ENV{REQUEST_URI}?$ENV{QUERY_STRING}",
    );
    $tequila->init ();
  } 

  $tequila->authenticate ();
  $CONTENTS{sciper}   = $tequila->{attrs}{uniqueid};
  
  if ($CONTENTS{sciper} eq '104782' and $login_as) {
		$CONTENTS{sciper} = $login_as ;
  }

  @allunits  = getAccreds ($CONTENTS{sciper});
	@allgroups = $Groupes-> listGroupsUserBelongsTo($CONTENTS{sciper});
#warn "--> auth : allunits\n".Dumper(@allunits);
#warn "--> auth : allgroups\n".Dumper(@allgroups);
}

#______________
sub getAllObjects {
	
  my $allObjects;
  my $scipertodo = $CONTENTS{sciper};

warn ">> getAllObjects : start\n";

  @commonUnits = @allunits;

  my $sql = qq{select * from users left join obj on obj.id=users.obj_id  };
	my $sth = dbquery($sql);

  while (my $data = $sth->fetchrow_hashref) {
		if ($scipertodo) {
		 my $unites = ','.$data->{unites}.',';
		 if ( map {$unites =~ m/,$_,/} @allunits ) {
				$allObjects->{$data->{id}}->{usrdata}->{$scipertodo}->{reg} = 0;
				$allObjects->{$data->{id}}->{usrdata}->{$scipertodo}->{droit} = 'W';
			}
		}
		$allObjects->{$data->{id}}->{objdata} 	= $data;
		$allObjects->{$data->{id}}->{admins}->{$data->{sciper}} = 1 if $data->{droit} eq 'A';
		$allObjects->{$data->{id}}->{usrdata}->{$data->{sciper}}->{droit} = $data->{droit};
		$allObjects->{$data->{id}}->{usrdata}->{$data->{sciper}}->{mail}  = $data->{mail};
  }

warn ">> getAllObjects : ".Dumper($allObjects->{3772});
  
  $allObjects;

}

#______________
sub getObjects {
  my ($scipertodo) = @_;
  $scipertodo   = $CONTENTS{sciper} unless $scipertodo;
  
  my @allunits  = $CONTENTS{sciper} eq $scipertodo ? @allunits  : getAccreds ($scipertodo) ;
  my @allgroups = $CONTENTS{sciper} eq $scipertodo ? @allgroups : $Groupes-> listGroupsUserBelongsTo($scipertodo) ;
  my ($commonUnits, $commonUsers) ; 

  my $sql = qq{select * from obj };
	my $sth = dbquery($sql);

  while (my $data = $sth->fetchrow_hashref) {
  	next unless $data->{id};
		$allObjects->{$data->{id}}->{objdata} 	= $data;
		if ($scipertodo and $data->{unites}) {
			my %units = map { $_ => 1 } split /,/, $data->{unites};
			my $commonunit;
			foreach my $unit (@allunits) {
			 if (defined $units{$unit} ) {
				$allObjects->{$data->{id}}->{usrdata}->{$scipertodo}->{reg} 	= 0;
				$allObjects->{$data->{id}}->{usrdata}->{$scipertodo}->{droit} = 'W';
				$commonunit = 1;
			 }
			}
			map { $commonUnits->{$_} = 1 } split (/,/, $data->{unites}) if $commonunit;
		}
		if ($scipertodo and $data->{groupes}) {
			my %groups = map { $_ => 1 } split /,/, $data->{groupes};
			my $commonunit;
			foreach my $group (@allgroups) {
				my $groupname = $group->{name};
				if (defined $groups{$groupname} ) {
					$allObjects->{$data->{id}}->{usrdata}->{$scipertodo}->{reg} = 0;
					$allObjects->{$data->{id}}->{usrdata}->{$scipertodo}->{droit} = 'W';
					$commonunit = 1;
				}
			}
#			map { $commonUnits->{$_} = 1 } split (/,/, $data->{unites}) if $commonunit;
		}
  }
  my $sql = qq{select * from users left join obj on obj.id=users.obj_id };
	my $sth = dbquery($sql);

  while (my $data = $sth->fetchrow_hashref) {
  	next unless $data->{sciper};
		$allObjects->{$data->{id}}->{usrdata}->{$data->{sciper}}->{droit} = $data->{droit};
		$allObjects->{$data->{id}}->{usrdata}->{$data->{sciper}}->{mail}  = $data->{mail};
		$allObjects->{$data->{id}}->{objdata} = $data unless defined $allObjects->{$data->{id}}->{objdata};
 		$allObjects->{$data->{id}}->{usrdata}->{$data->{sciper}}->{reg} 	= $data->{droit};

		$commonObjects->{$data->{id}} 	 = $data->{droit};
		$commonUsers->{$data->{sciper}}	 = $data->{droit};
		$Admins->{$data->{sciper}}->{$data->{id}}  = 1 if $data->{droit} eq 'A';
  }
  
  @commonUsers 	 = sort keys %$commonUsers;
  @commonUnits 	 = sort keys %$commonUnits;

}

#______________
sub getObjUsers {
  my ($objID) = @_;
  return unless $objID;
  
  my @scipers = keys %{$allObjects->{$objID}->{usrdata}};

  if ($allObjects->{$objID}->{objdata}->{unites}) {	# implicit access
  	foreach my $sigle (split(/,/, $allObjects->{$objID}->{objdata}->{unites})) {
  		next unless $sigle;
  		push @scipers, keys %{$allUnitsUsersBySigle{$sigle}};
  	}
  	foreach my $groupe (split(/,/, $allObjects->{$objID}->{objdata}->{groupes})) {
  		next unless $groupe;
  		my @members = $Groupes->listMembers($groupe);
  	}
  }

  return sort_uniq (@scipers);

}

#__________________
sub sort_uniq {
	my (@liste) = @_;
	return unless @liste;
	
	my %count;	# - sort unique
	my @sorted = grep { ++$count{$_} < 2} @liste;
	return @sorted;
 
}

#__________________
sub getObjAdmins {
	my ($objID) = @_;
	return unless $objID;
	my @scipers = map {
		$_ if ($allObjects->{$objID}->{usrdata}->{$_}->{droit} eq 'A')
	} keys %{$allObjects->{$objID}->{usrdata}};
	return sort_uniq (@scipers);
}

#__________________
sub getObjAdminsTxt {
	my ($objID) = @_;
	return unless $objID;

	my $admins;
	my @scipers = getObjAdmins($objID);
	return unless scalar @scipers;
	foreach my $sciper (sort {lc($dinfo->{$a}->{nom}) cmp lc($dinfo->{$b}->{nom})} @scipers) {
		$admins .= qq{<a href="mailto:$dinfo->{$sciper}->{email}">$dinfo->{$sciper}->{nom}&nbsp;$dinfo->{$sciper}->{prenom}</a><br>} if $dinfo->{$sciper}->{email};
	}
	$admins;
}

#______________
sub isSuperUser {
  my ($sciper) = @_;
  return unless $sciper;
  return 1 if $superusers =~ /$sciper/;
  return 0;

}

#__________________
sub resAccessAllowed {
  my ($res) = @_;
  return 0 unless scalar %$res;
  return 1 if $superusers =~ /$CONTENTS{sciper}/;
  my $obj_id = $res->{obj_id};
  my $sciper = $res->{sciper};
  return 1 if $Admins->{$CONTENTS{sciper}}->{$obj_id};	# - admin

#  if ($userObjects->{$obj_id}->{objdata}->{disp} eq 'd' or $userObjects->{$obj_id}->{objdata}->{disp} eq 'r') {
	if ($userObjects->{$obj_id}->{objdata}->{datedeb} and $userObjects->{$obj_id}->{objdata}->{datedeb}  ne '0000-00-00') {	#	- indisp présente
		return 0 if $res->{datedeb} ge $userObjects->{$obj_id}->{objdata}->{datedeb} and $res->{datedeb} le $userObjects->{$obj_id}->{objdata}->{datefin};
		return 0 if $res->{datefin} ge $userObjects->{$obj_id}->{objdata}->{datedeb} and $res->{datefin} le $userObjects->{$obj_id}->{objdata}->{datefin};
		return 0 if $res->{datedeb} le $userObjects->{$obj_id}->{objdata}->{datedeb} and $res->{datefin} ge $userObjects->{$obj_id}->{objdata}->{datefin};
	}

	return 1 if $sciper eq $CONTENTS{sciper};			# - owner

	if ($userObjects->{$obj_id}->{objdata}->{disp} eq 'r') {	#	- explicit access only
		if (defined $allObjects->{$objID}->{usrdata}->{$sciper}->{reg}) {
			return 0 unless $allObjects->{$objID}->{usrdata}->{$sciper}->{reg};	#	- not explicit access
		}
		return 0;
	}

	return 1 if exists $allObjects->{$obj_id}->{usrdata}->{$CONTENTS{sciper}};	# - registered or implicit

#  }

  return 0;
  
}

#__________________
sub objAccessAllowed {
  my ($objID) = @_;

my $verbose = 1 if $CONTENTS{sciper} eq '136108';
  return 1 if $CONTENTS{sciper} and $superusers =~ /$CONTENTS{sciper}/;
  unless ($objID) {
  	foreach my $obj_id (keys %{$Admins->{$CONTENTS{sciper}}}) {
  		return 1 if $Admins->{$CONTENTS{sciper}}->{$obj_id}
  	}
  }

warn "   0 objAccessAllowed ACC_TYPE=$CONTENTS{ACC_TYPE} : $objID\n" if $verbose;
  return 1 if $Admins->{$CONTENTS{sciper}}->{$objID};		# - admin
warn "   1 objAccessAllowed : $objID\n" if $verbose;

	if ($allObjects->{$objID}->{objdata}->{hide}) {
  	return 1 if exists $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}} and $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}}->{reg};
		return 0;	
	}
warn "   2 objAccessAllowed : $objID\n" if $verbose;

  if ($CONTENTS{ACC_TYPE} eq 'W') {		#	- write reservation
  	if ($allObjects->{$objID}->{objdata}->{disp} eq 'r') {
warn "   3 objAccessAllowed : $objID\n" if $verbose;
  		return 1 if exists $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}} and $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}}->{reg};
		} elsif ($allObjects->{$objID}->{objdata}->{disp} eq 'd') {
				return 1 if exists $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}} && $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}}->{droit} ne 'R';
		} elsif ($allObjects->{$objID}->{objdata}->{datedeb} and $allObjects->{$objID}->{objdata}->{datedeb}  ne '0000-00-00') {
  		if ($allObjects->{$objID}->{objdata}->{datedeb} le $crt_date and $crt_date le $allObjects->{$objID}->{objdata}->{datefin}) {
	  		return 1 if exists $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}} && $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}}->{droit} ne 'R';
  		}
			return 0;
		}
  } else {		#	- consultation
		return 1 unless $allObjects->{$objID}->{objdata}->{visible} eq 'r';
		return 1 if exists $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}};
  }
warn "   KO objAccessAllowed : $objID\n" if $verbose;

  return 0;
}

#----
sub addUser {
  my ($user) = @_;
  
  my $sciper = $user->{sciper};
  my $droit  = $user->{droit};
  my $obj_id = $user->{obj_id};
  my $mail   = $user->{mail};

  return unless $sciper and $obj_id;
  erreur ("pas de droits d'administration", 1) unless scalar %{$Admins->{$CONTENTS{sciper}}};

  my $sql = qq{select sciper from users where sciper=? and obj_id=?};
	my $sth = dbquery($sql, $sciper, $obj_id);

  return if $sth->fetchrow_array;

  my $sql = qq{
	insert into users set 
		sciper=?,
		obj_id=?,
		droit=?,
		mail=?
	};
	dbquery($sql, $sciper, $obj_id, $droit, $mail);

  my $droitTxt = $droit eq 'A' 
  							? 'administrateur' 
  							: $droit eq 'R'
  								?  'réservation'
  								: 'consultation';
  my $msg = qq{
  Bonjour,
  
Votre accès à la gestion des réservations  en tant qu'$droitTxt pour l'objet : $userObjects->{$obj_id}->{objdata}->{nom} est ouvert. Cette opération a été effectuée par $dinfo->{$CONTENTS{sciper}}->{prenom} $dinfo->{$CONTENTS{sciper}}->{nom}. Veuillez le contacter pour plus de détails.

L'accès à l'application (authentification Tequila requise) : $URLres

Votre système de gestion des réservations
  };
  my $subj = qq{gestion des réservations : ouverture du compte};
  sendMail ($dinfo->{$sciper}->{email}, $subj, $msg) if $dinfo->{$sciper}->{email} and $NOTIFYUSER;

  logger ($obj_id, '', qq{new user $sciper [droits=$droit, mail=$mail] par $CONTENTS{sciper}}) ; 
  
}

#----
sub majUser {
  my ($user) = @_;
  
  my $sciper = $user->{sciper};
  my $droit  = $user->{droit};
  my $obj_id = $user->{obj_id};
  my $mail   = $user->{mail};

  return unless $sciper and $obj_id;
  erreur ("pas de droits d'administration", 1) unless scalar %{$Admins->{$CONTENTS{sciper}}};

  my $sql = qq{select sciper from users where sciper=? and obj_id=?};
	my $sth = dbquery($sql, $sciper, $obj_id);

  unless ($sth->fetchrow_array) {
	  my $sql = qq{
		insert into users set 
			sciper=?,
			obj_id=?,
			droit=?,
			mail=?
		};
		dbquery($sql, $sciper, $obj_id, $droit, $mail);

	  logger ($obj_id, '', qq{add user $sciper [droits=$droit, mail=$mail] par $CONTENTS{sciper}}) ; 
	  return;
  }

  my $sql = qq{update users set droit=?,mail=? where sciper=? and obj_id=?};
	dbquery($sql, $droit, $mail, $sciper, $obj_id);

  my $droitTxt = $droit eq 'A' 
  							? 'administrateur' 
  							: $droit eq 'R'
  								?  'réservation'
  								: 'consultation';

  my $msg = qq{
  Bonjour,
  
Votre accès à la gestion des réservations  en tant qu'$droitTxt pour l'objet : $userObjects->{$obj_id}->{objdata}->{nom} a été modifié. Cette opération a été effectuée par $dinfo->{$CONTENTS{sciper}}->{prenom} $dinfo->{$CONTENTS{sciper}}->{nom}. Veuillez le contacter pour plus de détails.

L'accès à l'application (authentification Tequila requise) : $URLres

Votre système de gestion des réservations
  };
  my $subj = qq{gestion des réservations : mise à jour du compte};
  sendMail ($dinfo->{$sciper}->{email}, $subj, $msg) if $dinfo->{$sciper}->{email}  and $NOTIFYUSER;

  logger ($obj_id, '', qq{maj user $sciper, $obj_id : [droits=$droit, mail=$mail] par $CONTENTS{sciper}}) ; 
  
}

#----
sub delUser {
  my ($sciper, $objID) = @_;

  return unless $sciper and $objID;
  erreur ("pas de droits d'administration", 1) unless exists $Admins->{$CONTENTS{sciper}}->{$objID};
  
  my $sql = qq{select sciper from users where sciper=? and obj_id=?};
	my $sth = dbquery($sql, $sciper, $objID);

  return unless ($sth->fetchrow_array);

  my $sql = qq{delete from users where sciper=? and obj_id=?};
	dbquery($sql, $sciper, $objID);

  my $msg = qq{
  Bonjour,
  
Votre accès à la gestion des réservations pour la ressource : $userObjects->{$objID}->{objdata}->{nom} a été annulé par $dinfo->{$CONTENTS{sciper}}->{prenom} $dinfo->{$CONTENTS{sciper}}->{nom}.
Veuillez le contacter pour plus de détails.

Votre système de gestion des réservations
  };
  my $subj = qq{gestion des réservations : annulation des droits d'accès};
  sendMail ($dinfo->{$sciper}->{email}, $subj, $msg) if $dinfo->{$sciper}->{email} and $NOTIFYUSER;
  logger ($objID, '', qq{del user $sciper pour obj : $objID par $CONTENTS{sciper}}) ; 

}

#----
sub majObject {
	my ($item) = @_;
	
	my $obj_id 	= $item->{id};
	my $nom 		= $item->{nom};
	my $pool 		= $item->{pool};
	my $max_pool= $item->{max_pool};
	my $descr 	= $item->{descr};
	my $disp 		= $item->{disp};
	my $visible	= $item->{visible};
	my $datedeb = $item->{datedeb};
	my $datefin = $item->{datefin};
	my $plan		= $item->{plan};
	my $unites	= $item->{unites};
	my $groupes = $item->{groupes};
	my $hide		= $item->{hide};
	return unless $nom;

	my $sql;
	if ($obj_id) {		# - maj

	    erreur ("pas de droits d'administration", 1) unless exists $Admins->{$CONTENTS{sciper}}->{$obj_id}  or $superusers =~ /\b$CONTENTS{sciper}\b/;

		$sql = qq{select * from obj where id = ?};
		$sth = $dbh->prepare( $sql) or die "database fatal error prepare\n$DBI::errstr\n$sql\n";
		$sth->execute (($obj_id)) or die "database fatal error : execute : $DBI::errstr";
		erreur ("ressource pas trouvée (id=$obj_id, nom=$nom)") unless $sth->fetchrow_hashref;

		$sql = qq{update obj set 
			nom=?,
			pool=?,
			max_pool=?,
			descr=?,
			disp=?,
			visible=?,
			datedeb=?,
			datefin=?,
			unites=?,
			groupes=?,
			plan=?,
			hide=?
		where id=$obj_id
		};

	} else {	# - new
	    erreur ("pas de droits d'administration", 1) unless exists $Admins->{$CONTENTS{sciper}}  or $superusers =~ /\b$CONTENTS{sciper}\b/;
		$sql = qq{insert into obj set 
			nom=?,
			pool=?,
			max_pool=?,
			descr=?,
			disp=?,
			visible=?,
			datedeb=?,
			datefin=?,
			unites=?,
			groupes=?,
			plan=?,
			hide=?
		};
		
	}
	dbquery($sql, $nom, $pool, $max_pool, $descr, $disp, $visible, $datedeb, $datefin, $unites, $groupes, $plan, $hide);

	unless ($obj_id) {
		$sql = qq{select LAST_INSERT_ID() from obj};
		my $sth = dbquery($sql);
	
		($obj_id) = $sth->fetchrow_array;
		addUser ({ 
			sciper => $CONTENTS{sciper}, 
			droit  => 'A', 
			obj_id => $obj_id,
			});

	}
	erreur ("erreur mise à jour ressource : veuillez contacter le support", 1) unless $obj_id;

	my $msg = qq{
	Bonjour,
	
La ressource : $nom a été modifiée par : $dinfo->{$CONTENTS{sciper}}->{nom} $dinfo->{$CONTENTS{sciper}}->{prenom}.

L'accès à l'application (authentification Gaspar/Tequila requise) : $URLres
Pour ne plus recevoir ces messages désactiver l'option "Mail" depuis la page 
de "ressources".

Votre système de gestion des réservations
	};
	notifyUsers ($obj_id, $msg);

	return $obj_id ;
}

#----
sub delObject {
	my ($item) = @_;
	
	my $objID 	= $item->{id};
	erreur ("identification de la ressource absente") unless $objID;
    erreur ("opérations en accès réservé", 1) unless $Admins->{$CONTENTS{sciper}}  or $superusers =~ /\b$CONTENTS{sciper}\b/;
	
	my $nom 		= $item->{nom};
	my $descr 	= $item->{descr};
	my $disp 		= $item->{disp};
	my $datedeb = $item->{datedeb};
	my $datefin = $item->{datefin};
	my $plan		= $item->{plan};

	my $sql = qq{select * from res where obj_id=?};
	my $sth = dbquery($sql, $objID);
	my $resIDs;
	while (my $data = $sth->fetchrow_hashref) {
		$resIDs .= "$data->{id},";
	}
	$resIDs =~ s/,$//;

	if ($resIDs) {
		# - del dates
		my $sql = qq{delete from dates where res_id in ($resIDs)};
		dbquery($sql);

		# - del res
		my $sql = qq{delete from res where id in ($resIDs)};
		dbquery($sql);
	}
	#	- del callbacks
	my $sql = qq{delete from call_backs where obj_id=?};
	dbquery($sql, $objID);

	
	my $msg = qq{
		La ressource : $nom a été effacée par : $dinfo->{$CONTENTS{sciper}}->{nom} $dinfo->{$CONTENTS{sciper}}->{prenom}.
	};
	notifyUsers ($objID, $msg);
	
	# - del user access
	my $sql = qq{delete from users where obj_id=?};
	dbquery($sql, $objID);

	# - del obj
	my $sql = qq{delete from obj where id=?};
	dbquery($sql, $objID);

	logger ($objID, '', qq{delObject $nom [$objID] par $CONTENTS{sciper}}) ; 
		
}

#----
sub notifyUsers {
	my ($objID, $msg) = @_;
	return unless $objID and $msg;
	
	# - alert users
	my $sql = qq{select * from users where obj_id=? and mail=1};
	my $sth = dbquery($sql, $objID);
	my $mails;
	while (my $data = $sth->fetchrow_hashref) {
		$mails .= "$dinfo->{$data->{sciper}}->{email}," if $dinfo->{$data->{sciper}}->{email};
	}
	$mails =~ s/,$//;
	
	return unless $mails;
	sendMail ($mails, "Gestion des réservations ($userObjects->{$objID}->{objdata}->{nom})", $msg) ;
	
}

#----
sub addRes {
	my ($res) = @_;
	
	return unless $res;

	my $nom 		= $res->{nom};
	my $obj_id 	= $res->{objID};
	my $sciper  = $res->{sciper};
	my $datedeb	= $res->{datedeb};
	my $datefin	= $res->{datefin};
	my $descr 	= $res->{descr};
	my $dates		= $res->{dates};
	my $jour 		= $res->{jour};
	my $periodic= $res->{periodic};
	my $hdeb 		= $res->{hdeb};
	my $hfin 		= $res->{hfin};
	my $unite 	= $res->{unite};
	my $pool 		= $res->{pool};
	erreur ("paramètres absents [sciper=$sciper, dates=@$dates,obj_id=$obj_id]") unless $sciper and $dates and $obj_id;

	my $sql = qq{
	insert into res set 
		nom=?,
		descr=?,
		datedeb=?,
		datefin=?,
		obj_id=?,
		sciper=?,
		periodic=?,
		jour=?,
		hdeb=?,
		hfin=?,
		unite=?,
		pool=?,
		maj=now(),
		maj_by=?
	};
	dbquery($sql, $nom,$descr,$datedeb,$datefin,$obj_id,$sciper,$periodic,$jour,$hdeb,$hfin,$unite,$pool,$CONTENTS{sciper});

	$sql = qq{select LAST_INSERT_ID() from res};
	my $sth = dbquery($sql);
	my ($res_id) = $sth->fetchrow_array;
	$res->{res_id} = $res_id;
	
	foreach my $date (@$dates) {
		next unless $date and $res_id;
#		next if $date lt $start_date;
		$date = substr($date,0,4).'-'.substr($date,4,2).'-'.substr($date,6,2);
		$sql  = qq{insert into dates set	res_id=?, date=?};
		dbquery($sql, $res_id, $date);
	} 

	callBack ({
		action => 'add',
		res	 	 => $res,
	});
	
	logger ($obj_id, $res_id, qq{new res : $nom : $CONTENTS{sciper} $unite [$userObjects->{$obj_id}->{objdata}->{nom}, $periodic, $jour, $hdeb-$hfin]});

	my $msg = qq{
Nouvelle réservation

   Ressource : $userObjects->{$obj_id}->{objdata}->{nom}
 Réservé par : $dinfo->{$CONTENTS{sciper}}->{nom}  $dinfo->{$CONTENTS{sciper}}->{prenom}};
 	$msg .= qq{
Réservé pour : $dinfo->{$sciper}->{nom}  $dinfo->{$sciper}->{prenom}} if $CONTENTS{sciper} ne $sciper;
 	$msg .= qq{
   Nb objets : $pool
      Raison : $nom [ $descr ]
        Date : @$dates
 Périodicité : $periodic
        Jour : $jour
 Heure Début : $hdeb
   Heure Fin : $hfin

L'accès à l'application (authentification Gaspar/Tequila requise) : $URLres
Pour ne plus recevoir ces messages désactiver l'option "Mail" depuis la page 
de "ressources".

Votre système de gestion des réservations
	};

	notifyUsers($obj_id, $msg);

	disp_res ($res_id);

}

#----
sub majRes {
	my ($res) = @_;
	return unless $res;

warn ">> majRes\n";

	my $res_id = $res->{res_id};
	my %old_res = getRes ($res_id);
	erreur ("réservation pas trouvée") unless scalar %old_res;

	my $nom 		= $res->{nom};
	my $obj_id 	= $res->{objID};
	my $sciper  = $res->{sciper};
	my $descr 	= $res->{descr};
	my $datedeb	= $res->{datedeb};
	my $datefin	= $res->{datefin};
	my $dates		= $res->{dates};
	my $jour 		= $res->{jour};
	my $periodic= $res->{periodic};
	my $hdeb 		= $res->{hdeb};
	my $hfin 		= $res->{hfin};
	my $unite 	= $res->{unite};
	my $pool 		= $res->{pool};
	erreur ("paramètres absents [sciper=$sciper, dates=@$dates,obj_id=$obj_id]") unless $sciper and $dates and $obj_id;

	if ($CONTENTS{op} eq 'renew') {
		# - del dates between date1 and date2
		$datedeb = substr($datedeb,0,4).'-'.substr($datedeb,4,2).'-'.substr($datedeb,6,2);
#		$datefin = substr($datefin,0,4).'-'.substr($datefin,4,2).'-'.substr($datefin,6,2);

		my $sql = qq{delete from dates where res_id=? and date >= ? };
		dbquery($sql, $res_id, $datedeb);
	
	} else {
		# - del old dates
		my $sql = qq{delete from dates where res_id=?};
		dbquery($sql, $res_id);
		$CONTENTS{op} = 'maj';
	}

	# - update res	
	my $sql = qq{update res set 
		nom=?,
		descr=?,
		datedeb=?,
		datefin=?,
		obj_id=?,
		sciper=?,
		periodic=?,
		jour=?,
		hdeb=?,
		hfin=?,
		unite=?,
		pool=?,
		maj=now(),
		maj_by=?
		where id=?
	};
	dbquery($sql, $nom,$descr,$datedeb,$datefin,$obj_id,$sciper,$periodic,$jour,$hdeb,$hfin,$unite,$pool,$CONTENTS{sciper},$res_id);

	# - add dates
	foreach my $date (@$dates) {
		next unless $date and $res_id;
#		next if $date lt $start_date;
		$date = substr($date,0,4).'-'.substr($date,4,2).'-'.substr($date,6,2);
		$sql  = qq{insert into dates set	res_id=?, date=?};
		dbquery($sql, $res_id, $date);
	} 

	callBack ({
		action => $CONTENTS{op},
		res	 	 => $res,
	});
	
	logger ($obj_id, $res_id, qq{maj res : $nom : $CONTENTS{sciper} [$userObjects->{$obj_id}->{objdata}->{nom},$periodic,$jour,$hdeb-$hfin]});

	my $msg = qq{
Mise à jour de réservation

   Ressource : $userObjects->{$obj_id}->{objdata}->{nom}
 Modifié par : $dinfo->{$CONTENTS{sciper}}->{nom} $dinfo->{$CONTENTS{sciper}}->{prenom}};
 	$msg .= qq{
Réservé pour : $dinfo->{$sciper}->{nom}  $dinfo->{$sciper}->{prenom}} if $CONTENTS{sciper} ne $sciper;
 	$msg .= qq{
      Raison : $nom [ $descr ]
   Nb objets : $pool
        Date : @$dates
 Périodicité : $periodic
        Jour : $jour
 Heure Début : $hdeb
   Heure Fin : $hfin

L'accès à l'application (authentification Gaspar/Tequila requise) : $URLres
Pour ne plus recevoir ces messages désactiver l'option "Mail" depuis la page 
de "ressources".

Votre système de gestion des réservations
	};
	notifyUsers($obj_id, $msg);

	disp_res($res_id);

}

#----
sub disp_res {
   my ($res_id, $noaction) = @_;
  
   $res_id = $CONTENTS{res_id} unless $res_id;
   erreur ("identificateur de réservation absent", 1) unless $res_id;

   my %res 	 = getRes ($res_id);
   my $dates_txt;
   foreach my $date (@{$res{dates}}) {
   	$date =~ s/\-//g;
   	$dates_txt .= rev_date($date)." "
   }

   my @admins 	= getObjAdminsTxt ($res{obj_id});
   my $admins 	= join ", ", @admins;
   my $visible  = $userObjects->{$res{obj_id}}->{objdata}->{visible} eq 'r' ? 'restreinte' : 'ouverte' ;
   my $datedeb 	= $res{datedeb};
      $datedeb 	=~ s/\-//g;
   my $datefin 	= $res{datefin};
      $datefin 	=~ s/\-//g;
   my $indispd1 = rev_date($userObjects->{$res{obj_id}}->{objdata}->{datedeb});
   my $indispd2 = rev_date($userObjects->{$res{obj_id}}->{objdata}->{datefin});
   my $pool 	= $res{pool};

   print qq{
   <h3>Réservation</h3>
   <style>
   td { padding-left:5px;}
   </style>
   <table cellspacing="2" cellpadding="0">
   <tr>
   	<td align="right" width="100">Salle/objet :
   	<td>$allObjects->{$res{obj_id}}->{objdata}->{nom}
   <tr>
   	<td align="right">Description :
   	<td>$allObjects->{$res{obj_id}}->{objdata}->{descr}
   <tr>
   	<td align="right" >Visibilité des réservations :
   	   	<td>$visible
   <tr>
   };
   print qq{
   <tr>
   	<td align="right" ><span style="color:red">Indisponible :</span>
   	   	<td>Du $indispd1 au $indispd2
   <tr>
   } if $userObjects->{$res{obj_id}}->{objdata}->{datedeb} and $userObjects->{$res{obj_id}}->{objdata}->{datedeb}  ne '0000-00-00' ;
   print qq{
   	<td align="right">Plan :
   	   	<td>$allObjects->{$res{obj_id}}->{objdata}->{plan}
   <tr>
   	<td align="right" valign="top">Administrateurs :
   	   	<td>$admins
   </table>
   <p></p>
   <table width="75%" border="0">
   <tr><td align="right" width="100"><b>Type :</b><td>$res{periodic}&nbsp;$res{jour}
   };
   
   unless ($res{periodic} eq 'ponctuelle') {
	   print qq{
	   <tr><td align="right" width="100"><b>Date début :</b><td>}.rev_date($datedeb).qq{
	   <tr><td align="right" width="100"><b>Date fin :</b><td>}.rev_date($datefin)
   }
   
   my $doneby = $dinfo->{$res{sciper}}->{nom} ? qq{$dinfo->{$res{sciper}}->{nom}&nbsp;$dinfo->{$res{sciper}}->{prenom}} : $res{sciper};
   my $modby  = $dinfo->{$res{sciper}}->{nom} ? qq{$dinfo->{$res{maj_by}}->{nom}&nbsp;$dinfo->{$res{maj_by}}->{prenom}} : $res{maj_by};
   my $sigle  = getResSigleUnite (%res);
   my $no_accred = '<span style="color: red;">(no accred)</span>' if $res{unite} && ! defined $allUnitsUsers->{$res{unite}}->{$res{sciper}};
   print qq{
	   <tr><td align="right" valign="top"><b>Dates :</b><td>$dates_txt
	   <tr><td align="right"><b>Heure Début :</b><td>$res{hdeb}
	   <tr><td align="right"><b>Heure Fin :</b><td>$res{hfin}
	   <tr><td align="right"><b>Réservé pour :</b><td>$doneby $no_accred
	};
	print qq{<tr><td align="right"><b>Unité :</b><td>$sigle} if $sigle;
	print qq{<tr><td align="right"><b>Nombre d'objets :</b><td>$pool} if $userObjects->{$res{obj_id}}->{objdata}->{pool};
	
	print qq{
	   <tr><td align="right"><b>Raison :</b><td>$res{nom}
	   <tr><td align="right"><b>Détails :</b><td>$res{descr}
	   </table>
   };
   print "<p>(<i>réservation déclarée ou modifiée le : $res{maj}" if $res{maj};
   print " par $modby</i>)</p>" if $res{maj_by};

  unless ($CONTENTS{op} eq 'ignore') {
	  if (resAccessAllowed (\%res) and !$noaction and ($res{sciper} eq $CONTENTS{sciper} or $Admins->{$CONTENTS{sciper}}->{$res{obj_id}})) {
		print qq{
			<p><input type="button" value="modifier" OnClick="location.href='$URLres/mod_res?op=mod&res_id=$res_id'">
			-------------};
			print qq{<input type="button" value="prolonger les dates" OnClick="location.href='$URLres/add_res?op=renew&res_id=$res_id'">
			-------------} unless $res{periodic} eq 'ponctuelle';
			print qq{<input type="button" value="dupliquer" OnClick="location.href='$URLres/add_res?op=dup&res_id=$res_id'">
			-------------} ;
			print qq{<input type="button" style="border:1px solid red; margin:2px;background-color:yellow;" value="export vers agenda" OnClick="				location.href='$URLres/ical?res_id=$res_id'">
			-------------} ;
			print qq{
			<input type="button" value="supprimer" OnClick="
				if (confirm('Supprimer la réservation ?')) {
					location.href='$URLres/mod_res?op=del&res_id=$res_id'
				}">
		};
		
		if ($res{periodic} ne 'ponctuelle') {
			print qq{<hr>
			<em>Pour supprimer une date d'un groupe périodique, cliquer sur <b>modifier</b> et dé-sélectionner la date à enlever de la liste des dates du groupe.</em> 
			};		
		}
		
	  }
  }
}
#--------
sub getPeriodicUserRes {
  my ($sciper) = @_;

  return unless $sciper;
  my $sql = qq{select dates.*,res.*,obj.nom as obj_nom from dates, res, obj where 
  	res.id=dates.res_id and
  	res.obj_id=obj.id and
  	res.sciper = ? and
  	res.datefin is null
  	order by obj_id,date,hdeb
  };

  my $userres;
	my $sth = dbquery($sql, $sciper);

  while (my $data = $sth->fetchrow_hashref) {
  	next if $data->{periodic} eq 'ponctuelle';
  	my $rsrv = $userres->{$data->{id}};
	push @$rsrv, $data;
  	$userres->{$data->{id}} = $rsrv;
  }
  $sth->finish;

  return $userres;
}


#--------
sub getAllRes {
  my ($d1, $d2, $obj_id) = @_;

  return unless $d1 and $d2;
  
  $obj_id = '' if $obj_id eq 'toutes';

  my @rsrv;

  # - crt res
  $d1 = substr($d1,0,4)."-".substr($d1,4,2)."-".substr($d1,6,2);
  $d2 = substr($d2,0,4)."-".substr($d2,4,2)."-".substr($d2,6,2);
  my $sql = qq{select * from dates, res where 
  	dates.date >= ?  and 
  	dates.date <= ?  and
  	res.id=dates.res_id 
  };
  
  my @obj;
  if ($obj_id) {
    @obj = $obj_id =~ /,/ ? split(",", $obj_id) : split(" ", $obj_id);
  } else {
    @obj = keys %$userObjects;
  }
  my $objects = join("','", @obj);

  $sql .= qq{ and	res.obj_id in ('$objects') };
  $sql .= $CONTENTS{sortbyhour} ? qq{order by date,hdeb,obj_id} : qq{order by date,obj_id,hdeb};
	my $sth = dbquery($sql, $d1, $d2);

  while (my $data = $sth->fetchrow_hashref) {
	my $item = {
		res_id	=> $data->{id},
		nom			=> $data->{nom},
		obj_id	=> $data->{obj_id},
		sciper	=> $data->{sciper},
		periodic=> $data->{periodic},
		jour		=> $data->{jour},
		date		=> $data->{date},
		hdeb		=> $data->{hdeb},
		hfin		=> $data->{hfin},
		unite		=> $data->{unite},
		pool		=> $data->{pool},
	};
	push @rsrv, $item;
  }
  $sth->finish;

  @rsrv;

}

#--------
sub selObj {
  my ($field_name, $value, $dim, $flag_select, $select_id) 	= @_;
  
  my ($index, $selected) ;
  my $txt =  $flag_select eq 'multiple' ?  
  	qq{<select name="$field_name" id="$select_id" size="5" multiple>
  		<option value="toutes" selected>toutes</option>} :  
  	qq{<select name="$field_name" id="$select_id" size="$dim">};
  
  $txt .=  qq{<option value="" selected>-- choisir --</option> } unless $flag_select;
  
  my $count = 0;
  foreach my $objID (sort {lc($userObjects->{$a}->{objdata}->{nom}) cmp lc($userObjects->{$b}->{objdata}->{nom})} keys %$userObjects) {
#warn "--> selObj : $objID, $userObjects->{$objID}->{objdata}->{nom}, $allObjects->{$objId}->{usrdata}->{droit}\n" ;
  	next unless objAccessAllowed ($objID);
  	next unless $objID;
  	my $nom 	= $userObjects->{$objID}->{objdata}->{nom};
  	$count++;
  	my $selected = ($objID eq $value) ? 'selected' : '';
  	$txt .=  qq{<option value="$objID" $selected>$nom</option>};
  }
  $txt .=  qq{</select>};
  
#  erreur ("aucune ressource accessible, contacter un administrateur") unless $count;
    
  print $txt;
}

#----
sub footpage {

  print qq{
  	<td valign="top" style="width: 300px; padding: 4px 4px 4px 30px;">
  };
  
  if (scalar keys %$userObjects) {
	if (isAuth ()) {
	  print qq{
		<div style="width:100%; float:left; background-color:#eeeeee; border: 1px solid #aaaaaa; padding: 4px;">
		<h4>nouvelle réservation</h4>
		<script language="javascript">
			function selChekd (id) {
			var obj = document.getElementById(id);
			if (obj.options[obj.selectedIndex].value == '') {
				alert ('choisir une ressource');
				return false;
			}
			return true;
			}
		</script>

		<form action="$thescript/add_res" name="form" method="POST" onsubmit="return selChekd('objid');">
		<input type=hidden name=pass value=0>
	   };

   	 $CONTENTS{ACC_TYPE} = 'W';	

	   selObj ('objID', '', 1,'','objid');
	
	   print qq{
		 <br>
			<input type=radio name=mode value=0 checked> <b>ponctuelle</b><br>
			<input type=radio name=mode value=1> <b>quotidienne</b><br>
			<input type=radio name=mode value=2> <b>périodique</b><br>
		  <br><input type=submit name=go value=continuer>
		  </form>
		  </div>
		<div class="clear"></div>
		<hr>
	  };
	}
  }
  print qq{
    <h4>chercher</h4>
    <form name="form" action="$thescript/search?op=obj" method=post>
    une salle/objet : <br>
    <input name="nom_obj">
    </form>
    <form name="form" action="$thescript/search?op=usr" method=post>
    une personne (nom ou sciper):<br>
    <input name="nom_usr">
    </form>
    <br>
    <a href=$thescript/listobj>liste de tous les objets</a>
	<hr>
	<h4> logs</h4>
	<form name="form" action="$thescript/logs" "method=post"  onsubmit="return selChekd('logobjid');">
	salle/objet : <br>
	};
	$CONTENTS{ACC_TYPE} = 'R';
	selObj ('objID', '', 1,'','logobjid');
	print qq{
	  <p><input type=submit name=go value=afficher></p>
	</form>
	};

	if ($CONTENTS{sciper} and defined $Admins->{$CONTENTS{sciper}} or $superusers =~ /\b$CONTENTS{sciper}\b/) {
		print qq{
		<hr>
		<b><a href="$thescript/extract">extraction des réservations</a></b>
	   };
	}
   
	print qq{
    <hr>
    <h4>accès</h4>
    <ul style="margin-left: 15px; padding: 0;">
    <a href=$thescript?login=1>home</a><br>
	};
	print qq{
	  	 <a href=$thescript/gestion?op=obj>ressources</a> <br>
	  	 <a href=$thescript/gestion?op=res>réservations</a> <br>
	} if scalar keys %$userObjects;

	print qq{ <a href=$thescript/listcontacts>contact</a><br>};
	print qq{<p><a href=$ABS_HOME>absences</a> </p>} if scalar keys %$userObjects;
	
	print qq{ 
		</ul>
    <hr>
	<h4>FAQs</h4>
	<li><img alt="" src="/images/new_small.gif" style="height:12px; width:31px"> <a href="https://wiki.epfl.ch/resfaq#q1">quoi de neuf ?</a>
	<br>- droit de consultation
	<br>- notifications</li>
	<li><img alt="" src="/images/new_small.gif" style="height:12px; width:31px"> <a href="https://wiki.epfl.ch/resfaq#q1">quoi de neuf ?</a> (droit de consultation)</li>
	<li><a href=http://wiki.epfl.ch/resfaq#q2 target="_blank">comment avoir accès aux réservations...</a>
	<li><a href=http://wiki.epfl.ch/resfaq#q3 target="_blank">je reçois une avalanche de messages...</a>
	<br>[ <a href=http://wiki.epfl.ch/resfaq target="_blank">lire plus...</a> ]

  	<tr><td colspan="2">
  	<hr>
  
  	<small>user : $dinfo->{$CONTENTS{sciper}}->{prenom}&nbsp;$dinfo->{$CONTENTS{sciper}}->{nom} 
  	[ <a href=$thescript>home</a> |
  	}  if exists $dinfo->{$CONTENTS{sciper}};

  print qq{
  	 <a href=$thescript/gestion?op=obj>ressources</a> |
  	 <a href=$thescript/gestion?op=res>réservations</a> |
  } if scalar keys %$userObjects;
 
  if (exists $dinfo->{$CONTENTS{sciper}}) {
	  print qq{- données du }.&rev_date($crt_date);
	  printf " %02d:%02d</small>", $hour, $min;
  }
  print qq{ 
  	</table>
  	</body>
  	</html>
  };

  exit;
}

#__________________
sub main {

# - news
	my $news = 0;
	print qq{<div class="redbox">
		<p>...</p>
		</div>
	} if $news;
		
    print qq{<h2>Gestion des réservations</h2>
    };
    
    unless (keys %$userObjects) {
    	print qq{
    	La gestion des réservations est un outil d'accès en ligne aux ressources partagées par un groupe : salles des conférences, équipement de laboratoire, appareils, etc.<br>
    	
    	<p>Vous pouvez retrouver l'objet ou la salle qui vous intéresse à travers la boîte de recherche ci-contre et contacter ensuite un des administrateurs pour obtenir le droit de réservation.
    	</p>
    	<p>Si vous êtes enregistré dans le système, <a href=$thescript?login=1><b>effectuer la connexion</b></a> pour accéder à vos ressources.</p>
    	<p><a href=http://wiki.epfl.ch/resfaq>Plus de réponses sur la gestion des réservations...</a></p>
    	};
		&footpage ;
    }

	# - what's new
	print qq{<h4><img alt="what's new'" src="/images/new_small.gif" style="height:12px; width:31px"> What's new</h4>
	<li><a href="https://wiki.epfl.ch/resfaq#q1">Notifications aux utilisateurs d'une ressource</a></li>
	<li><a href="https://wiki.epfl.ch/resfaq#consultation">Accès en consultation</a></li>
	<li>call back réservations</li>
	<hr>};
 
    checkDoRenew();

    print qq{
   	<ul id="indented">
   	<li>consultations des <a href=$thescript/gestion?op=obj><b>ressources/salles</b></a> | 
        <a href=$thescript/gestion?op=res><b>réservations</b></a> |
        <a href=$thescript/search?op=usr&nom_usr=$CONTENTS{sciper}><b>mes droits</b></a> </li><br>
    <li> <b>graphiques des réservations</b> (sélection multiple possible)
    <ul id="indented">
   <form action=${thescript}/graph name=form method=POST>
   <b>salle/ressource :</b> };
   selObj ('objID', '', 1, 'multiple');
   print qq{ date 
		<input name="date1" id="date1" size="10" value="}.(sprintf "%02d/%02d/%4d",$mday,$mon,$year).qq{">
		<a href="#" 
			onClick="cal.select(document.getElementById('date1'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
		</a>, 
		graphique <select name=graph_type>
	  <option value=M selected>du mois</option>
	  <option value=W >de la semaine</option>
	  </select>  <input type=submit value='afficher'>
	  </form>
	  </ul>
   };
   
   checkConflicts();
   
   my $date = ($CONTENTS{date}) ? $CONTENTS{date} : $crt_date;

   my ($start_we, $end_we) = split (/\t/, &get_start_end_week($date));
   $end_we = &get_next_n_day($end_we,2);
   print "<li style='margin-top: 10px;'>les réservations de la <b>semaine du ".&rev_date($start_we,1)."</b> [ <a href=$thescript?date=".&get_next_n_day($start_we,7).">semaine suivante&gt;&gt;</a> ] | <b>graphiques</b> : [ <a href=$thescript/graph?objID=toutes&graph_type=W&date1=".&rev_date($start_we).">cette semaine</a> |
	        <a href=$thescript/graph?objID=toutes&graph_type=W&date1=".&rev_date(&get_next_n_day($start_we,7)).">semaine suivante&gt;&gt;</a> ]";

   &listRes ($start_we, $end_we);
   
   print "</ul>";

   &footpage;
   exit;
}

#__________________
sub checkDoRenew {

	my $userRes = getPeriodicUserRes($CONTENTS{sciper});
	my @resToActivate;
	foreach my $id (keys %$userRes) {
		my $resRef   = $userRes->{$id};
		my @resArray = sort {$a->{date}.$a->{hdeb} cmp $b->{date}.$b->{hdeb}} @$resRef;
		my $lastres  = pop @resArray;
		next if $lastres->{periodic} eq 'ponctuelle';
		my $date = $lastres->{date};
		$date =~ s/\-//g;
		my $activ_date = get_prev_n_day ($date, 30);
		if ($crt_date > $activ_date) {
			push @resToActivate, {
				id 			=> $id, 
				nom 		=> $lastres->{nom},
				obj_id	=> $lastres->{obj_id},
				obj_nom	=> $lastres->{obj_nom},
				hdeb		=> $lastres->{hdeb},
				hfin		=> $lastres->{hfin},
				periodic=> $lastres->{periodic},
				jour		=> $lastres->{jour},
				date		=> $lastres->{date},
			} if substr($lastres->{date}, 0, 4) eq $year;
		}
	}
	
	return unless scalar @resToActivate;
	print qq{<hr>
		<h3><img src="/images/new_small.gif" border="0"> réservations périodiques à prolonger</h3>
		<ul>
		<table width="90%" border="1" cellpadding="0" cellspacing="0">
		<th>raison
		<th>salle/objet
		<th>périodicité
		<th>de
		<th>à
		<th>dernière<br>réservation
		<th>action
	};
	foreach my $res (sort {$a->{obj_id} cmp $b->{obj_id}} @resToActivate) {
		print qq{
			<tr>
			<td>$res->{nom}
			<td>$res->{obj_nom}
			<td align="center">$res->{periodic}&nbsp;$res->{jour}
			<td>$res->{hdeb}
			<td>$res->{hfin}
			<td align="center">$res->{date}
			<td align="center"><a href=$thescript/add_res?res_id=$res->{id}&date=$res->{date}&mode=2&op=renew>prolonger</a> | <a href=$thescript/add_res?res_id=$res->{id}&date=$res->{date}&mode=2&op=ignore>ignorer</a>
		}
	}
	print qq{</table></ul><hr>};
}

#__________________
sub listobj {
	
    print qq{<h2 align=left>Toutes les ressources disponibles en réservation</h2>   };
    
    my $allObj = getAllObjects();
   
	print qq{
		<table width="100%" border="1" cellpadding="2" cellspacing="0">
		<th class=header_cell style="min-width:70px;">Droits
		<th class=header_cell style="min-width:70px;">Nom
		<th class=header_cell style="min-width:200px;max-width:300px;">Description
		<th class=header_cell>Ressource cachée
		<th class=header_cell>Visibilité des réservations
		<th class=header_cell>Accès
		<th class=header_cell>Plan
		<th class=header_cell>Administrateurs
	};
	foreach $objID (sort {lc($allObj->{$a}->{objdata}->{nom}) cmp lc($allObj->{$b}->{objdata}->{nom})} keys %$allObj) {
		next unless $objID;
		my $obj = $allObj->{$objID}->{objdata};

		#	- visible
		$CONTENTS{ACC_TYPE} = 'R';
		my ($droits, $detLink);
		if (objAccessAllowed ($objID)) {
			$droits  = qq{<img src="/images/see.png">}  ;
			$detLink = qq{<a href="$thescript/cons_obj?objID=$obj->{id}"><b>$obj->{nom}</b></a>} ;
		} else {
			$droits  = qq{<img src="/images/no-see.png">} ;
			$detLink = qq{<b>$obj->{nom}</b>} ;
		}

		#	- res
		$CONTENTS{ACC_TYPE} = 'W';
		$droits .= qq{ <img src="/images/ok.gif" width="15"> } if objAccessAllowed ($objID);

		#	- admin
		$droits .= qq{ <img src="/images/keys.gif" width="15"> }  if $Admins->{$CONTENTS{sciper}}->{$objID};

		my @admins = getObjAdminsTxt ($obj->{id});
		my $admins = join "<br>", @admins;
		my $style;

		my $access = 'disponible'	  if $obj->{disp} eq 'd';
		   $access = '<span style="color:red;">restreint</span>' 	  if $obj->{disp} eq 'r';
		my $visible= $obj->{visible} eq 'r' ? 'restreinte' : 'ouverte' ;
		   $datedeb = $obj->{datedeb};
		   $datefin = $obj->{datefin};
		   $datedeb =~ s/\-//g;
		   $datefin =~ s/\-//g;
		$style = qq{style="background-color:#FCE3E3;"} if $access =~ /indisponible/;
		$style = qq{style="background-color:#orange;"} if $access =~ /restreint/;
		
		my $planLink = qq{<a href="$URLplan?q=$obj->{plan}"><img src="/images/plan.gif" border="0" width="14"></a>} if $obj->{plan};

		unless ($admins) {
			$admins = qq{sans administrateurs};
			$style  = qq{style="background-color:red;color:yellow;"} ;
		}
		
		$access .= qq{, <div id="units_div$objID" style="display:none; width:500px; height: auto; padding: 10px; border: 1px solid #aaaaaa; position:absolute; top:50%; left:50%; -webkit-transform: translate(-50%,-50%);-ms-transform: translate(-50%,-50%);transform:translate: (-50%,-50%);-moz-transform: translate(-50%,-50%); z-index: 9999; background-color: white; text-align: left; "><b>$obj->{nom}</b> - accès implicite pour les accréditations dans : <a href="#" style="float:right;"onclick="document.getElementById('units_div$objID').style.display='none';">fermer</a>
		<br><br> $obj->{unites}</div>
		<a href="#" onclick="document.getElementById('units_div$objID').style.display='block';">accès implicite...</a>} if $obj->{unites};
		$access =~ s/,/, /g;
		$access .= '<br><span style="color:red;">indisponible du '.rev_date($datedeb)." au ".rev_date($datefin).'</span>' if $datedeb ge $year.'0101'  && $datefin ge $crt_date;
		my $hide = qq{<span style="color:red;">cachée</span>} if $obj->{hide};

		print qq{
			<tr $style>
			  <td valign=top class="td_ul">$droits</td>
			  <td valign=top class="td_ul">$detLink</td>
			  <td valign=top class="td_ul" style="max-width:300px;">$obj->{descr}</td>
			  <td valign=top class="td_ul">$hide</td>
			  <td valign=top class="td_ul">$visible</td>
			  <td valign=top class="td_ul">$access</td>
			  <td valign=top class="td_ul">$planLink</td>
			  <td valign=top class="td_ul">$admins</td>
			</tr>
		};
	}
	print qq{
	</table>
    };
    footpage;
    exit;

}

#__________________
sub listres {
	
   my $objID = $CONTENTS{objID};
   my $date  = $CONTENTS{date1};
   print qq{<h2 align=left><img src=/images/agenda.gif >Réservations : $userObjects->{$objID}->{objdata}->{nom}</h2>
	<hr>
   };

   my ($startdate, $enddate);
   if ($date =~  /M/) {
		my ($yr, $mon) = split (/M/, $date);
		$mon  =~ s/^0//;
		$date = sprintf "%04d%02d01", $yr, $mon;
		($startdate, $enddate) = split (/\t/, &get_start_end_week($date));
   } else {
		($startdate, $enddate) = split (/\t/, &get_start_end_week($date));
   }
	$enddate = &get_next_n_day($enddate,2);
	print "<li><b>les réservations de la semaine du ".&rev_date($startdate,1)."</b>\n";
	print " [ <a href=$thescript?date=".&get_next_n_day($startdate,7).">semaine suivante&gt;&gt;</a> ] 
	  [ <b>graphiques:</b> <a href=$thescript/graph?objID=toutes&graph_type=W&date1=".&rev_date($startdate).">cette semaine</a> ¦
			<a href=$thescript/graph?objID=toutes&graph_type=W&date1=".&rev_date(&get_next_n_day($startdate,7)).">semaine suivante&gt;&gt;</a>]";
	
    listRes ($startdate, $enddate, $objID);

    footpage;
    exit;
}

#__________________
sub listRes {
  my ($d1, $d2, $objID, $sciper_todo, $no_userdata) = @_;

  erreur ("dates début et fin absentes") unless $d1 and $d2;

  my @crt_res = getAllRes ($d1, $d2, $objID);
  my $output;
  
  my @filter;
  if ($CONTENTS{motcle}) {
	@filter = $CONTENTS{motcle} =~ /,/ ? split /,/, $CONTENTS{motcle} : split / /, $CONTENTS{motcle};
	$output .= qq{ - réservations filtrées par mots clés : $CONTENTS{motcle}};
  }

  my $url;
  if ($pathinfo =~ /cons_res/) {	#	- recherche
  	$url .= qq{$thescript$pathinfo?date1=$d1&date2=$d2&motcle=$CONTENTS{motcle}&};
  } else {
  	$url = $thescript.'?';
  }
  
  if ($CONTENTS{csv}) {
	  $output .= qq{date;debut;fin;ressource;raison;sciper;user;unite;sigle\r};
  } else {
	  $output .= qq{
		<p><table border=1 cellpadding=0 cellspacing=0><tr>
		<td style="text-align:center;" width=100 class="header_cell"><b>date</b>
		<td style="text-align:center;" align=center width=50 class="header_cell"><a href="${url}sortbyhour=1"><img src="/images/arrow-up.png" height=12></a> <b>de</b>
		<td style="text-align:center;" align=center width=50 class="header_cell"><b>à</b>
		<td align=center width=120 class="header_cell"><a href="$url"><img src="/images/arrow-up.png" height=12></a> <b>salle/objet</b>
		<td align=center width=50 class="header_cell"><b>Nb. objets</b>
		<td align=center width=180 class="header_cell"><b>raison</b>
	  };
	  $output .= qq{<td align=center width=200 class="header_cell"><b>réservé par</b>} unless $no_userdata;
#	  $output .= qq{<td align=center width=50 class="header_cell"><b>sciper</b>} unless $no_userdata;
  }
  
  my ($tmp_date, $predate, $crt_salle);
  my $done;
	foreach my $res ( @crt_res) {
		my $res_id = $res->{res_id};
		my $date   = $res->{date};
		$date 	   =~ s/\-//g;
		my $obj_id = $res->{obj_id};
		my $sciper = $res->{sciper};
		if ($objID  and $objID ne 'toutes') {
			next unless $objID =~ /\b$obj_id\b/;
		}
		if ($sciper_todo) {
			next unless $sciper eq $sciper_todo;
		}
		my $nom		= $res->{nom};
	
		# - filter
		if ($CONTENTS{motcle}) {
			my $found = map {$nom =~ m/\b$_\b/i} @filter;
			next unless $found;
		}
	
		my $hdeb	= $res->{hdeb};
		my $hfin	= $res->{hfin};
		my $unite	= $res->{unite};
		my $pool	= $userObjects->{$obj_id}->{objdata}->{pool} > 1 ? $res->{pool} : '-';
		my $salle	= $userObjects->{$obj_id}->{objdata}->{nom};
		next unless $date ge $d1 and $date le $d2;
		my $dayname = substr(get_day_name ($date), 0, 2);

		my $style;
		if (substr($predate, 0, 8) eq $date) {
			if ($crt_salle eq $salle) {
			if (substr($predate,8,5) le $hdeb  and $hdeb lt substr($predate,13,5))	{
				$style = qq{style="background-color:red;color:white;"} if $userObjects->{$objID}->{objdata}->{pool} == 1;
			}
			} else {
				$crt_salle = $salle
			}
		} else {
			$crt_salle = $salle unless ($crt_salle eq $salle)
		}	
		$predate = $date.$hdeb.$hfin;	
	
		getUserData($sciper) unless defined $dinfo->{$sciper};

		if ($CONTENTS{csv}) {
			$salle =~ s/;//g;
			$nom   =~ s/;//g;
			$user  = qq{$dinfo->{$sciper}->{nom} $dinfo->{$sciper}->{prenom}};
			$user  =~ s/;//g;

			my $unitsigle 	= getUnitById($unite) if $unite;

			getUserData ($sciper) unless defined $dinfo->{$sciper};

			unless ($unite) {
				map { if ($dinfo->{$sciper}->{accreds}->{$_}->{ordre} == 1) {
							$unite 		= $_;
							$unitsigle 	= $dinfo->{$sciper}->{accreds}->{$_}->{sigle};
						}
				} keys %{$dinfo->{$sciper}->{accreds}};
			}

			$output .= qq{$date;$hdeb;$hfin;$salle;$nom;$sciper;$user;$unite;$unitsigle\r};

		} else {
			$output .= qq{<tr id="$tr_style"  $style>}; 
			$tr_style = $tr_style eq 'tr_alt' ? '' : 'tr_alt' ;
			if ($tmp_date ne $date) {
				$output .= sprintf qq{<td align=center width=80><span style="float:left;">$dayname</span>&nbsp;%s\n},&rev_date($date);
				$tmp_date = $date;
			} else {
				$output .= "<td  width=80>&nbsp;\n";
			}
			$output .= "
			<td align=center width=60>$hdeb
			<td align=center width=60>$hfin
			<td width=120>$salle
			<td width=50 align=center>$pool
			<td align=left width=180><a href=$thescript/disp_res?res_id=$res_id>$nom</a>
			";
			$output .= "<td align=left width=200>$dinfo->{$sciper}->{nom}&nbsp;$dinfo->{$sciper}->{prenom}" unless  $no_userdata;
	#		$output .= "<td align=left width=50>$sciper" unless  $no_userdata;
		}
		$done = 1;
	}

  if ($CONTENTS{csv}) {
  	$output;
  } else {
		$output .= "</table>\n";
  	print $output if $done;
  }

}

#__________________
sub listconflicts {
	
   print qq{<h2 align=left><img src=/images/agenda.gif > Conflits des réservations </h2>};
   my @conflicts = checkConflicts('', '1');
   
   unless (scalar @conflicts) {
   	print qq{Aucun conflit prochain };
   	footpage();
   }
   
   print qq{
   Les réservations ci-dessous sont en conflit (superposition) de dates à partir du jour courant. Effectuer les corrections nécessaires pour les réservations sous votre contrôle ou contacter un administrateur de l'instance autrement.
   <p></p>
   };
   my ($crtdate, $crtsalle);

   foreach my $item (sort {$a->{date} cmp $b->{date}} @conflicts) {

    my $date  		= $item->{date};
       $date  		=~ s/\-//g;
    my $objID 		= $item->{objID};
    my $nom1  		= $item->{res1}->{nom};
    my $nom2  		= $item->{res2}->{nom};
    my $hdeb1 		= $item->{res1}->{hdeb};
    my $hdeb2 		= $item->{res2}->{hdeb};
    my $hfin1 		= $item->{res1}->{hfin};
    my $hfin2 		= $item->{res2}->{hfin};
    my $sciper1 	= $item->{res1}->{sciper};
    my $sciper2 	= $item->{res2}->{sciper};
    my $nom_salle 	= $userObjects->{$objID}->{objdata}->{nom};
    
    my $res1 = {
    	sciper => $sciper1,
    	obj_id => $objID,
    };
    my $res2 = {
    	sciper => $sciper2,
    	obj_id => $objID,
    };
    my ($lnk1a,$lnk1b, $lnk2a, $lnk2b);
    if (resAccessAllowed ($res1)) {
    	$lnk1a = qq{<a href=$thescript/disp_res?res_id=$item->{res1}->{resid}>};
    	$lnk1b = '</a>';
    } 
    if (resAccessAllowed ($res2)) {
    	$lnk2a = qq{<a href=$thescript/disp_res?res_id=$item->{res2}->{resid}>};
    	$lnk2b = '</a>';
    }
    my $pool_obj = " [ max $userObjects->{$objID}->{objdata}->{pool} ]" if  $userObjects->{$objID}->{objdata}->{pool} > 1;
    my $pool_res1 = " [ $item->{res1}->{pool} ]" if  $userObjects->{$objID}->{objdata}->{pool} > 1;
    my $pool_res2 = " [ $item->{res2}->{pool} ]" if  $userObjects->{$objID}->{objdata}->{pool} > 1;
	print qq{
	  <h3>$nom_salle $pool_obj : le }.rev_date($date).qq{</h3>
	  <li>$hdeb1 - $hfin1 : $lnk1a<b>$nom1</b>$lnk1b $pool_res1 par : $dinfo->{$sciper1}->{nom}&nbsp;$dinfo->{$sciper1}->{prenom}
	  <li>$hdeb2 - $hfin2 : $lnk2a<b>$nom2</b>$lnk2b $pool_res2 par : 
	  $dinfo->{$sciper2}->{nom}&nbsp;$dinfo->{$sciper2}->{prenom}
	};
   }
   footpage();

}

#__________________
sub graph {
   my ($tday, $tmon, $tyear) = split (/\//, $CONTENTS{"date1"});
   
   unless ($tday) {
   	$tyear = substr($crt_date,0,4);
   	$tmon  = substr($crt_date,4,2);
   	$tday  = substr($crt_date,6,2);
   }
   
   $CONTENTS{graph_type} = 'M' unless $CONTENTS{graph_type};

   &main_graph ($CONTENTS{objID},$tday,$tmon,$tyear,$CONTENTS{graph_type});
   
   footpage ();
   
}

#__________________
sub main_graph{
  my ($objID, $jj, $mm, $aa, $graph_type) = @_;
  my @objIDs	= $objID eq 'toutes' ? keys %$userObjects : split / /, $objID;
  my ($maxday, $week_nb, $file_name);

  my ($dd1, $dd2) = split(/\t/, &periode($jj, $mm, $aa, $graph_type));
  
  &header () ;
  
  if ($graph_type eq 'M') {
     $file_name  = time().'_'.$aa.'M'.$mm;
     check_feb($aa);
     $maxday     = $mois[$mm];
#     print "<h2>Réservations : $mois_noms[$mm] $aa</h2>\n";
  } else {
#     print "<h2>Réservations : semaine du ".&rev_date($dd1,1)."</h2>\n";
     my $tmp  = $dd1;
     $tmp     =~ s/ /0/g;
     $week_nb 	 = &get_week_nb ($dd1);
     $file_name  = time().'_'.$tmp;
     $aa = substr ($dd1,0,4);
     $mm = substr ($dd1,4,2);
     $jj = substr ($dd1,6,2);
  }
  $mm =~s/^0//;
  $jj =~s/^0//;

  if ($graph_type eq 'M') {
     $gwidth = $offsetx + $name_col + ($maxday+1)* ($smallw + $intercar);
     $ghight = int(1.5*$offsety) + ($smallh+5) * $res_hours;
  }
  if ($graph_type eq 'W') {
     $gwidth = $width_WD;
     $ghight = int(1.5*$offsety) + ($smallh+5) * $res_hours;
  }

  foreach my $objID (sort {lc($userObjects->{$a}->{objdata}->{nom}) cmp lc($userObjects->{$b}->{objdata}->{nom})} @objIDs) {
  	next unless $objID;
		my @cnflcts    = checkConflicts($objID, '1');
		my $hascnflcts = scalar @cnflcts ? qq{<img src="/images/warning.gif" align="middle"> conflits => <a href="$thescript/listres?objID=$objID&graph_type=M&date1=$file_name">affichage liste</a> } : '';
		my $obj = $allObjects->{$objID}->{objdata};
		if ($obj->{visible} eq 'r' and ! exists ($userObjects->{$objID})) {
			print qq{
				Ressource <b>$obj->{nom}</b> - visibilité en accès restreint - <a href=$thescript/search?op=obj&nom_obj=$obj->{nom}>contacter ses administrateurs</a> pour plus de détails
			};
			next;
		}
    my $objDir 	   = $mapsdir.$objID;
    my $nom_salle  = $obj->{nom};
  	my $image_file = qq{$objDir/${file_name}.gif};
  	my $map_file   = qq{$objDir/${file_name}.map};
  	unless (-d $objDir) {
  		mkdir ($objDir, 0775)  or erreur ("** create obj dir  [$objDir] : $!", 1);
		}
		open (MAP, ">$map_file") or erreur ("** err open map_file : $map_file", 1);
	
		$img = GD::Simple->new($gwidth+$offsetx+2,$ghight+$offsety+2);
		$img->font(gdSmallFont);
	
		draw_rect (1, 1, $gwidth+$offsetx+1, $ghight+$offsety+1, 1, 'white');
		draw_rect ($offsetx, $offsety, $gwidth, $ghight, 1, 'ivory');
		draw_text ($offsetx, $offsety+12, $textcol, "Heure");
	
		draw_month ($ghight, $mm, $aa) if ($graph_type eq 'M');
		draw_week  ($ghight, $dd1) 	   if ($graph_type eq 'W');
		draw_salle( $objID, $dd1, $dd2, $graph_type);
	
		open (OUT, ">$image_file");
		binmode OUT;
		print OUT $img->gif;
		close OUT;
		close MAP;

		my $maps_url = qq{/.maps/${objID}};
		my $path_info = $CONTENTS{path_info} ? $CONTENTS{path_info}  : $ENV{PATH_INFO};
		$path_info =~ s#^/##;
		my $descr = $CONTENTS{show_descr} ? $obj->{descr} : qq{<div style="width:80%; height:100px; overflow: scroll; border: 1px solid #aaaaaa;">$obj->{descr}</div>};
		
		my $objects;
		foreach my $obj_id (@objIDs) {
			next unless $obj_id;
			$objects .= qq{objID=$obj_id&};
		}
	
		if ($graph_type eq 'M') {
			my $prev_year = $aa;$prev_month = $mm - 1; if ($prev_month < 1)  {$prev_month = 12; $prev_year = $aa -1;}
			my $next_year = $aa;$next_month = $mm + 1; if ($next_month > 12) {$next_month = 1;  $next_year = $aa +1;}
			my $pdate	 = sprintf "01/%02d/%4d", $prev_month, $prev_year;
			my $ndate	 = sprintf "01/%02d/%4d", $next_month, $next_year;
			print qq{<hr>Ressource : <b>$nom_salle</b>, $mois_noms[$mm] $aa  <a href=$thescript/$path_info?${objects}date1=$pdate&graph_type=M&show_descr=$CONTENTS{show_descr}>précédent</a> | <a href=$thescript/$path_info?${objects}date1=$ndate&graph_type=M&show_descr=$CONTENTS{show_descr}>suivant</a>  $hascnflcts<br>
			$descr
			<p style="margin-top: 20px;"><a href=$thescript/image?objID=$objID&path_info=$path_info&graph_type=$graph_type&map=$file_name><img src=$maps_url/$file_name.gif border=0 ISMAP></a>
			};
		} else {
			my $nd = &get_next_n_day((sprintf "%4d%02d%02d",$aa,$mm,$jj), 7);
			my $pd = &get_prev_n_day((sprintf "%4d%02d%02d",$aa,$mm,$jj), 7);
			printf "<hr>Ressource : <b>$nom_salle</b>, semaine du ".&rev_date($dd1,1)." :  <a href=$thescript/$path_info?objID=%s&graph_type=W&date1=%s>précédente</a> ",$objID,&rev_date($pd);
			printf " | <a href=$thescript/$path_info?objID=%s&graph_type=W&date1=%s>suivante</a> ",$objID, &rev_date($nd);
			printf " | <a href=$thescript/$path_info?objID=$objID&path_info=$path_info&graph_type=M&date1=01/%02d/%4d>le graphique du mois</a> ",$mm,$aa ;
			print qq{ $hascnflcts<br>
			$descr
			<p style="margin-top: 20px;"><a href=$thescript/image?objID=$objID&path_info=$path_info&graph_type=$graph_type&map=$file_name><img src=$maps_url/$file_name.gif  border=0 ISMAP></a>};
		}

    listRes ($dd1, $dd2, $objID);

  }
 
  footpage () ;

}
 
#__________________
sub periode {
   my ($jour, $mois, $an, $graph_type) = @_;

   if ($graph_type eq 'M') {
      check_feb($an);
	  my $date1 = sprintf "%4d%02d01",$an, $mois;
	  my $date2 = sprintf "%4d%02d%02d",$an, $mois, $mois[$mois];
   	  $date1 =~ s/ /0/g;
   	  $date2 =~ s/ /0/g;
   	  return (sprintf "%s\t%s", $date1, $date2);
   } else {
	  my ($d1, $d2) = split(/\t/, get_start_end_week (sprintf "%4d%02d%02d",$an, $mois, $jour));
	  $d2 = get_next_n_day($d1, 6);
	  return qq{$d1\t$d2};
   }
}
 

#__________________
sub draw_salle {
  my ($objID, $date1, $date2, $graph_type) = @_;
  my $ox  = $offsetx;
  my $oy  = $offsety+$smallh+5;
  my $x1  = $ox + $name_col;
  my $x2  = $gwidth;
  my $y2  = $oy;
  my $y1;
  my $nom_salle = $userObjects->{$objID}->{objdata}->{nom};
  if (length($salle) > $nom_salle_len) {
		draw_text ($ox+2, $oy+12, $textcol, substr($nom_salle,0,$nom_salle_len));
		draw_text ($ox+2, $oy+14+$smallh, $textcol, substr($nom_salle,$nom_salle_len,length($nom_salle)));
  } else {
		draw_text ($ox+2, $oy+12, $textcol, $nom_salle);
  }
  draw_line ($ox, $oy, $x2, $y2, 'black');
  draw_line ($ox, $oy-1, $x2, $y2-1, 'black');
  for (my $i = 0; $i < $res_hours; $i++) {
    $y1 = $oy + $i*($smallh+5);
		draw_text ($x1, $y1+12, 'red', $i+$DEBUT);
		draw_line ($x1+$smallh+7, $y1, $x2, $y1, 'black');
  }
  printf MAP "D\t%d\t%d\t%d\t%d\tdispo\n", $ox+$name_col+14, $oy, $x2, $y1+10;
  $color_index = 0;
  foreach my $res (getObjRes ($objID, $date1, $date2)) {
		my	$res_id	= $res->{res_id};
		my	$nom		= $res->{nom};
		my	$obj_id	= $res->{obj_id};
		my	$sciper	= $res->{sciper};
		my	$jour		= $res->{jour};
		my	$date		= $res->{date};
				$date 	=~ s/\-//g;
		my	$hdeb		= $res->{hdeb};
		my	$hfin		= $res->{hfin};
    if ($date ge $date1 and $date le $date2) {
			$date = &get_day_name($date) if ($graph_type eq 'W')  ;
    	draw_date ($date, $ox, $oy, $hdeb, $hfin, $tuser, $nom, $graph_type, $res_id);
			$CONTENTS{crt_nom}  = $nom;
			$CONTENTS{crt_date} = $date;
    }
   }
}
 
#__________________
sub draw_date {
  my ($date, $ox, $oy, $debut, $fin, $usrname, $nom, $graph_type, $rec) = @_;
  my $vct = $smallh+5;
  my ($x1, $x2, $y1, $y2);
  if ($graph_type eq 'M' ) {
		$x1 = $offsetx+$name_col+ substr($date,6,2) * ($smallw+$intercar)+2;
		$x2 = $x1 + $smallw+$intercar-3;
  } 
  if ($graph_type eq 'W' ) {
		my $dayindex = &get_day_index($date);
		$dayindex = 7 unless $dayindex;
		$x1 = $offsetx+$name_col+ ($dayindex-1) * $week_day_width + 16;
		$x2 = $x1 + $week_day_width - 2;
  }
  my $fin = (&conv_time($fin) > $FIN) ? $FIN : $fin;
  $y1 = $oy + int((&conv_time($debut)-$DEBUT)*$vct)+2;
  $y2 = $oy + int((&conv_time($fin)-$DEBUT)*$vct)-2;
  my $bg_color_sect = $colors_sect{$SECT{$usrname}};
  my $fg_color_sect = $fgcolors_sect{$SECT{$usrname}};
  unless ($bg_color_sect) {
	  $bg_color_sect = $color_list[0][0];
	  $fg_color_sect = $color_list[0][1];
  }
#   if ($CONTENTS{crt_date} eq $date && $CONTENTS{crt_nom} ne $nom) {
#   	$color_index++;
# 	  $bg_color_sect = $color_list[$color_index][0];
# 	  $fg_color_sect = $color_list[$color_index][1];
#   }
  draw_rect($x1-1,$y1-1,$x2,$y2+1, 1, $bg_color_sect);
  if ($graph_type ne 'M') {
		my $tmp_nom = substr($nom,0,11);
		
		draw_text (int($x1+($x2-$x1-$smallw*length($tmp_nom))/2-$intercar)+3,$y1+12, $fg_color_sect, $tmp_nom);
		
  }
  printf MAP "R\t%s\t%s\t%s\t%s\t%s\n", $x1, $y1, $x2, $y2, $rec;
}
#__________________
sub conv_time {
  my ($hour) = @_;
  my ($h, $m);
  $h = substr ($hour, 0, 2);
  $m = substr ($hour, 3, 2);
  return ($h + ($m/60.));
}

#_________
sub draw_month {
  my ($ghight, $month, $year) = @_;
  my $y1 = $offsety;
	draw_text ($offsetx, $offsety, $textcol, '  Semaine    ->');
  for (my $i = 1; $i <= $mois[$month]; $i++) {
		my $x1 = $offsetx+$name_col+$i*($smallw+$intercar);
		my $x2 = $offsetx+$name_col+$i*($smallw+$intercar);
		my $tmp_day = sprintf "%4d%02d%02d", $year, $month, $i;
		$tmp_day =~ s/ /0/g;
		my $day_name = &get_day_name($tmp_day);
		if ($day_name eq 'samedi' || $day_name eq 'dimanche') {
			draw_rect ($x1,$y1+1, $x2+$smallw+$intercar-1, $ghight-1,'', 'lightgrey');
    } elsif ($jferies{$tmp_day}) {
			if ($tmp_day eq "${year}1224" or $tmp_day eq "${year}1231") {
				draw_rect (($x1+$offsetx/2+3),$y1+1, $x2+$smallw+$intercar-1, $ghight-1,'', 'lavender');
			} else {
				draw_rect ($x1,$y1+1, $x2+$smallw+$intercar-1, $ghight-1,'', 'lavender');
			}
    } else {
			draw_rect ($x1,$offsety-12, $x1+$smallw+$intercar-1,$offsety,'','lightgrey');
    }  
    if ($day_name eq 'lundi' || $i == '1') {
			$nb = &get_week_nb(sprintf "%4d%02d%02d",$year,$month,$i);
			draw_text ($x1+2,$offsety, $textcol,$nb);
			($date1,$date2) = split (/\t/, &get_start_end_week(sprintf "%4d%02d%02d",$year,$month,$i));
			$wx = $x1;
			$wy = $offsety-12;
    }
    if ($day_name eq 'vendredi'  || $i == $maxday) {
			printf MAP "W\t%d\t%d\t%d\t%d\t%s\n", $wx, $wy, $x1+($smallw+$intercar),$offsety, $date1;	
    }
	  draw_line ($x1, $y1+1, $x2, $ghight, 'black');
	  draw_text ($x1+2,$y1+13, $textcol,$i);
	  draw_text ($x1+2,$ghight+12, $textcol,$i);
    if ($tmp_day eq $crt_date) {
			$img->moveTo($x1,$offsety);
			$img->fgcolor('red');
			$img->setThickness(2);
			$img->lineTo($x1,$offsety+13*16);
			$img->lineTo($x1+$smallw+$intercar-1,$offsety+13*16);
			$img->lineTo($x1+$smallw+$intercar-1,$offsety);
			$img->lineTo($x1,$offsety);
			$img->setThickness(1);
	  }      
  }
}
 
#_________
sub draw_week {
  my ($ghight, $dd1, $nb) = @_;

  my $y2 = $ghight;
  my $y1 = $offsety+12;

  draw_text ($offsetx, $offsety, $textcol, "  Semaine    -> $nb");

  for (my $i = 1; $i <= 7; $i++) {
   my $an   = substr ($dd1, 0, 4);
   my $mois = substr ($dd1, 4, 2);
   my $jour = substr ($dd1, 6, 2);

   my $x1 = $offsetx+$name_col+$smallw+$intercar+($i-1)*$week_day_width;
   my $x2 = $x1;

   my $tmp_day = sprintf "%4d%02d%02d", $an, $mois, $jour;
   $tmp_day =~ s/ /0/g;
   
   if ($jferies{$tmp_day}) {
	if ($tmp_day eq "${year}1224" or $tmp_day eq "${year}1231") {
	   draw_rect ($x1+$week_day_width/2,$y1+1, $x1+$day_width, $y2-1,'','lavender') if ($jferies{$tmp_day}) ;
	} else {
	   draw_rect ($x1,$y1+1, $x1+$day_width, $y2-1,'','lavender') if ($jferies{$tmp_day}) ;
	}
   }

   draw_line ($x1, $y1+1, $x2, $y2, 'black');
   draw_text ($x1+2,$y1-$smallh-5, $textcol, &get_day_name($dd1));
   draw_text ($x1+2,$y1, $textcol,    "$jour/$mois/$an");
   draw_text ($x1+2,$y2+12, $textcol, "$jour/$mois/$an");

   $dd1   = &get_next_n_day($tmp_day,1);

  }

}
 
#__________________
sub image {
  
  my $objID 		 		 = $CONTENTS{objID};
  my $graph_type 	 	 = $CONTENTS{graph_type};
  my ($map, $coords) = split(/\?/, $CONTENTS{map});
  
  return unless $objID and $graph_type and $map;

  my ($mapfile,$out, $an, $m, $d);

  my $objDir 	 	 = $mapsdir.$objID;
  my $nom_salle  = $userObjects->{$objID}->{objdata}->{nom};
  my $mapfile    = qq{$objDir/${map}.map};
  
  my $tmp_map_name = $map;
     $tmp_map_name =~ s/^\d+_//;
  if ($graph_type eq 'M') {
  	($an,$m) = split(/M/, $tmp_map_name);
  } else {
  	$an = substr ($tmp_map_name, 0, 4);
  	$m  = substr ($tmp_map_name, 4, 2);
  	$d  = substr ($tmp_map_name, 6, 2);
  }

#  my $query = $ENV{QUERY_STRING};
  my ($x, $y) = split (/,/, $coords);
  &read_map($mapfile);
#------------------ on clique sur quelle date?  ---------------------
  my $oy  = ($smallh+5)*$res_hours;
  my $y1  = $y - ($offsety+$smallh+5);
  while ($y1 > $oy) {
	$y1   = $y1 - ($smallh+5)*$res_hours;
  }
  $y1    = int($y1 / ($smallh+5)) + $DEBUT;
  my $x1 = $x - $offsetx - $name_col;
  if ($graph_type eq 'M') {
	$x1 = int ($x1 / ($smallw+$intercar));
  } else {
	$x1 = int ($x1 / $week_day_width) + $d;
	if ( $x1 > $mois[$m] ) {
	  $x1 = $x1 - $mois[$m];
	  $m++;
	}
  }
  my $d1 = sprintf "%4d%02d%02d%02dh00", $an, $m, $x1, $y1;

#------------------ semaine  ---------------------
  if (($out = &where_is ($x, $y, @map_weeks))  ne '') {
  	$out = $out->[0];
    main_graph ($objID, substr($out,6,2), substr($out,4,2), substr($out,0,4), 'W');
	  &footpage;
  }
#------------------ afficher reservation  ---------------------
  if (($out = &where_is ($x, $y, @map_res))    ne '') {
	  &header;
	  if (scalar @$out == 1) {
			$CONTENTS{res_id} = $out->[0];
			&disp_res ();
		} else {
			print qq{<h3>Réservations multiples $userObjects->{$objID}->{objdata}->{nom}</h3>
			<br>
			<table style="width:50%;">
				<tr style="font-weight: bold;">
				<th>Raison
				<th>Détails
				<th>Début
				<th>Fin
			};
			my $res_ids = join ',', @$out;
			my $sql = qq{select * from res where id in ($res_ids) };
			my $sth = dbquery($sql);
			while (my $data = $sth->fetchrow_hashref) {
				print qq{<tr>
					<td><a href="$thescript/disp_res?res_id=$data->{id}">$data->{nom}</a>
					<td>$data->{descr}
					<td>$data->{hdeb}
					<td>$data->{hfin}
					};
			}

			print qq{</table>};
		}
	  &footpage;
  } 
#------------------ nouvelle reservation  ---------------------
  if (($out = &where_is ($x, $y, @map_disp))    ne '') {
	  if ($d1 lt $crt_date) {
	    &erreur ("date déjà pasée");
	  }
#	  $jour = &get_day_name($x1,$m,$an);
	  $d1 =~ s/ /0/g;
	  &go_res($objID, $y1, $d1);
	  &footpage;
  }
#------------------ KO ---------------------
  erreur ("cette zone ($x, $y) n\'est pas active");
}
 
#__________________
sub go_res {
   my ($objID, $debut, $date) = @_;
   print "Location: ${RES_HOME}${thescript}/add_res?objID=$objID&mode=0&date=$date&debut=$debut\n\n";
}
 
#__________________
sub read_map {
   my ($map_name) = @_;

   open (MAP, "$map_name") or	erreur ("ouverture fichier map \"$map_name\"\n<p>faites <b>Back</b> et <b>Reload</b>", 1);
   
   while (<MAP>) {
		chop;
		my ($sym, $x1, $y1, $x2, $y2, $descr) = split (/\t/, $_);
		my $tmp_string = sprintf "%s\t%d\t%d\t%d\t%d",$descr, $x1, $y1, $x2, $y2;
		if ($sym eq 'W') { push (@map_weeks , $tmp_string);}
		if ($sym eq 'R') { push (@map_res   , $tmp_string);}
		if ($sym eq 'D') { push (@map_disp  , $tmp_string);}
   }
   close MAP;
}
 
#__________________
sub where_is {
  my ($x, $y, @table)  = @_;
 
 	my $ret_descr;
  for my $i (@table)    {
	 my ($descr, $x1, $y1, $x2, $y2) = split (/\t/, $i);
	 if ($x >= $x1 && $x <= $x2 && $y >= $y1 && $y <= $y2 ) {
	 	push @$ret_descr, $descr;
	 }
  }
  return $ret_descr;
}

#__________________
sub checkConflicts {
  my ($objID, $nolist) = @_;

  my (@conflicts);
  my ($date, $end_we) = split (/\t/, &get_start_end_week($crt_date));
  $date = sprintf "%04d-%02d-%02d ", substr($date,0,4), substr($date,4,2), substr($date,6,2); 
  
  my $objects = $objID ? "$objID" : join (",", keys %$userObjects);
  $objects =~ s/^,//;
  $objects =~ s/,,/,/g;

  my $sql = qq{select id,date,obj_id,nom,hdeb,hfin,sciper,pool from dates, res where 
		dates.date >= ? and
		res.id=dates.res_id and
		res.obj_id in ($objects)
		order by date,obj_id,hdeb
	};
	my $sth = dbquery($sql, $date);

  my ($crtdate, $crthdeb, $crtobj, $crthfin, $crtres, $crtscip, $crtnom,$pool);
  while (my $data = $sth->fetchrow_hashref) {
  	  next if $userObjects->{$data->{obj_id}}->{objdata}->{pool} > 1;	#	- skip pools
	  if ($data->{date} eq $crtdate) {
	   if ($data->{obj_id} eq $crtobj) {
	  	if ($data->{hdeb} ge $crthdeb and $data->{hdeb} lt $crthfin) {
	  		my $conflict = {
	  			date   => $crtdate,
	  			objID  => $crtobj,
	  			res1   => {
	  				resid => $crtres,
	  				sciper=> $crtscip,
	  				nom   => $crtnom,
	  				hdeb  => $crthdeb,
	  				hfin  => $crthfin,
	  				pool  => $crtpool,
				},
	  			res2   => {
	  				resid	=> $data->{id},
	  				sciper	=> $data->{sciper},
	  				nom		=> $data->{nom},
	  				hdeb 	=> $data->{hdeb},
	  				hfin 	=> $data->{hfin},
	  				pool 	=> $data->{pool},
				},
	  		};
	  		push @conflicts, $conflict;
	  	}
	   }
  }
	$crtdate = $data->{date};
	$crtobj  = $data->{obj_id};
	$crthdeb = $data->{hdeb};
	$crthfin = $data->{hfin};
	$crtres  = $data->{id};
	$crtscip = $data->{sciper};
	$crtnom  = $data->{nom};
	$crtpool = $data->{pool};
  }
 
  print qq{ [<img src="/images/warning.gif" align="middle"> <b>attention : </b> conflits de dates - <a href=$thescript/listconflicts>consulter...</a> ]} if scalar (@conflicts) and ! $nolist;

  return @conflicts

}

#__________________
sub resConflict {
  my ($objID, $res_id, $debut, $fin, $pool_request, $refdates) = @_;

  return unless $objID and $refdates and $debut and $fin;

  my $conflicts;
  my $obj_dispo = $userObjects->{$objID}->{objdata}->{pool} - $pool_request;
  my @dates  	= @$refdates;
  @$refdates 	= ();
  foreach my $date (@dates) {
		$date 			 = substr($date,0,4)."-".substr($date,4,2)."-".substr($date,6,2);
		my $reserved = 0;
		my $sql = qq{select * from dates, res where 
			dates.date = ? and
			res.id=dates.res_id and
			res.obj_id = ?
			order by date,hdeb
		};
		my $sth = dbquery($sql, $date, $objID);

		while (my $data = $sth->fetchrow_hashref) {
			next if $res_id == $data->{res_id};
			if (
				($debut ge $data->{hdeb} and $debut lt $data->{hfin}) or
				($fin   gt $data->{hdeb} and $fin   le $data->{hfin}) or
				($debut le $data->{hdeb} and $fin   ge $data->{hfin}) 
			) {
				$conflicts->{$date}->{$data->{obj_id}}->{"$data->{hdeb}:$data->{hfin}"} = { 
					sciper => $data->{sciper}, 
					nom		 => $data->{nom}, 
					res_id => $data->{res_id}, 
					nb_obj => $data->{pool}, 
				};
				$reserved += $data->{pool};
			}
		}
		if ( $obj_dispo - $reserved >= 0 ) {
			my $dateref = $date;
				 $dateref =~ s/\-//g;
			push @$refdates, $dateref;	# - valid date, put it back
			delete $conflicts->{$date};
		}
  }

  if ( scalar keys %$conflicts ) {
		my $pool = $userObjects->{$objID}->{objdata}->{pool} if $userObjects->{$objID}->{objdata}->{pool} > 1;
		print "
		<h4><font color=red>Conflits de dates ou plus de ressources disponibles</font></h4><br>
		Il y a déjà des réservations pour <b>$userObjects->{$objID}->{objdata}->{nom}</b> $pool pour les dates suivantes
		<style>
		th { font-weight: bold; background: #dddddd; margin: 0; }
		td { padding: 2px 10px 0 5px; border-bottom: 1px solid #aaaaaa; }
		</style>
		<table cellspacing=0 cellpadding=0 style='background: #eeeeee;'><th>date<th>de<th>à<th>nb. d'objets<th>réservé pour<th>par
		";
  	foreach my $date (keys %$conflicts) {
  		my $conflObj = $conflicts->{$date};
  		foreach my $obj_id (keys %$conflObj) {
				foreach my $period (keys %{$conflObj->{$obj_id}}) {
					my ($hdeb, $hfin) = split /:/, $period;
					$date =~ s/\-//g;
					my $sciper = $conflObj->{$obj_id}->{$period}->{sciper};
					my $res_id = $conflObj->{$obj_id}->{$period}->{res_id};
					my $nom 	 = $conflObj->{$obj_id}->{$period}->{nom};
					my $nb_obj = $conflObj->{$obj_id}->{$period}->{nb_obj};
					print qq{
					<tr>
						<td>}. &rev_date($date). qq{
						<td>$hdeb
						<td>$hfin
					};
					print qq{
						<td align=middle>$pool / $nb_obj
						<td><a href=$thescript/disp_res?res_id=$res_id>$nom
						<td>$dinfo->{$sciper}->{nom}&nbsp;$dinfo->{$sciper}->{prenom}
						</a>};
				}
			}  			
  	}
		print "</table><hr>";
 	}
	
	unless (scalar @$refdates) {	# - no dates
		my $errtxt  = "Réservation refusée. ";
		   $errtxt .= "<br>Vérifier la disponibilité d'objets du pool de cette ressource" if $userObjects->{$objID}->{objdata}->{pool} > 1;
		&erreur ($errtxt, 1);
	} else {
		print qq{<p><span style="color:red;font-weight:bold;">Les dates en conflit ont été enlevées de la liste ci-dessous.</span></p>} if scalar keys %$conflicts;
  }
}

#__________________
sub resConflict_OLD {
  my ($objID, $res_id, $debut, $fin, $pool, $refdates) = @_;

  return unless $objID and $refdates and $debut and $fin;

  my @conflicts;
  my $obj_dispo = $userObjects->{$objID}->{objdata}->{pool} - $pool;
  my @dates  	= @$refdates;
  @$refdates 	= ();
  foreach my $date (@dates) {
		$date 			 = substr($date,0,4)."-".substr($date,4,2)."-".substr($date,6,2);
		my $reserved = 0;
		my $sql = qq{select * from dates, res where 
		dates.date = ? and
		res.id=dates.res_id and
		res.obj_id = ?
		order by date,hdeb
		};
		my $sth = dbquery($sql, $date, $objID);

		while (my $data = $sth->fetchrow_hashref) {
			next if $res_id == $data->{res_id};
			if (
				($debut ge $data->{hdeb} and $debut lt $data->{hfin}) or
				($fin   gt $data->{hdeb} and $fin   le $data->{hfin}) or
				($debut le $data->{hdeb} and $fin   ge $data->{hfin}) 
			) {
				push @conflicts, "$data->{res_id}\t$date\t$data->{hdeb}\t$data->{hfin}]\t$data->{nom}\t$data->{sciper}\t$data->{pool}";
				$reserved += $data->{pool};
			}
		}
		if ( $obj_dispo - $reserved >= 0 ) {
			$date =~ s/\-//g;
			push @$refdates, $date;	# - valid date, put it back
		}
  }

  if ( scalar @conflicts ) {
		my $pool = qq{ [ nb. obj : $userObjects->{$objID}->{objdata}->{pool} ] } if $userObjects->{$objID}->{objdata}->{pool} > 1;
		print "
		<h4><font color=red>Conflits de dates ou plus de ressources disponibles</font></h4><br>
		Il y a déjà des réservations pour <b>$userObjects->{$objID}->{objdata}->{nom}</b> $pool pour les dates suivantes
		<style>
		th { font-weight: bold; background: #dddddd; margin: 0; }
		td { padding: 2px 10px 0 5px; border-bottom: 1px solid #aaaaaa; }
		</style>
		<table cellspacing=0 cellpadding=0 style='background: #eeeeee;'><th>date<th>de<th>à<th>nb. d'objets<th>réservé pour<th>par
		";
  	foreach (@conflicts) {
		my ($res_id, $date, $hdeb, $hfin, $nom, $sciper, $pool) = split (/\t/, $_);
		$date =~ s/\-//g;
		print qq{
			<tr>
			  <td>}. &rev_date($date). qq{
			  <td>$hdeb
			  <td>$hfin
			  <td align=middle>$pool
			  <td><a href=$thescript/disp_res?res_id=$res_id>$nom
			  <td>$dinfo->{$sciper}->{nom}&nbsp;$dinfo->{$sciper}->{prenom}
			  </a>};
  	}
	print "</table><hr>";
	
	unless (scalar @$refdates) {	# - no dates
		my $errtxt  = "Réservation refusée. ";
		   $errtxt .= "<br>Vérifier la disponibilité d'objets du pool de cette ressource" if $userObjects->{$objID}->{objdata}->{pool} > 1;
		&erreur ($errtxt, 1);
	} else {
		print qq{<p><span style="color:red;font-weight:bold;">Les dates en conflit ont été enlevées de la liste ci-dessous.</span></p>};
	}
  }
}

#__________________
sub mod_res {
  my ($res_id)= $CONTENTS{res_id};
  
  erreur ("identificateur de réservation absent", 1) unless $res_id;
  
  my %res = getRes ($res_id);
  erreur ("réservation inconnue : id=$res_id", 1) unless $res{res_id};

  erreur ("pas de droits pour cette réservation, veuillez contacter un administrateur", 1) unless (resAccessAllowed (\%res)  and ($res{sciper} eq $CONTENTS{sciper} or $Admins->{$CONTENTS{sciper}}->{$res{obj_id}}));

  if ($CONTENTS{op} eq 'del') {
     print "<hr><h2>Réservation annulée par $dinfo->{$CONTENTS{sciper}}->{nom}  $dinfo->{$CONTENTS{sciper}}->{prenom}</h2>\n";
     &disp_res($res_id, 1);
     my $sciper = $res{sciper};

		 my $sql = qq{delete from dates where res_id=?};
		 dbquery($sql, $res_id);

		 my $sql = qq{delete from res where id=?};
		 dbquery($sql, $res_id);
	 
		 logger ($res{obj_id}, $res_id, qq{del res : $res{nom} [$userObjects->{$res{obj_id}}->{objdata}->{nom},$res{periodic},$res{jour},$res{hdeb}-$res{hfin}]});

		callBack ({
			action => 'del',
			res	 	 => \%res,
		});
	 
		my $msg = qq{
Réservation annulée

    Ressource : $userObjects->{$res{obj_id}}->{objdata}->{nom}
Annulation par: $dinfo->{$CONTENTS{sciper}}->{nom}  $dinfo->{$CONTENTS{sciper}}->{prenom}};
 	$msg .= qq{
 Réservé pour : $dinfo->{$sciper}->{nom}  $dinfo->{$sciper}->{prenom}} if $CONTENTS{sciper} ne $sciper;
 	$msg .= qq{
       Raison : $res{nom} [ $res{descr} ]
         Date : @{$res{dates}}
  Périodicité : $res{periodic}
         Jour : $res{jour}
  Heure Début : $res{hdeb}
    Heure Fin : $res{hfin}

L'accès à l'application (authentification Gaspar/Tequila requise) : $URLres

Votre système de gestion des réservations
		};
		notifyUsers($res{obj_id}, $msg);

  }
  
  if ($CONTENTS{op} eq 'mod') {
  
	print "<h2>Réservations : mise à jour</h2>\n";
	
	unless ($CONTENTS{step}) {
		if ($res{periodic} eq "ponctuelle") {
			$CONTENTS{mode} = 0;
		} else {
			if ($res{periodic} eq "quotidienne") {
				$CONTENTS{mode} = 1;
			} else {
				$CONTENTS{mode} = 2;
			}
		}
		print qq{
		   <form action="$thescript/mod_res?step=1" name="form" method=POST>
		   <input type="hidden" name="op" 		value="mod">
		   <input type="hidden" name="mode" 	value="$CONTENTS{mode}">
		   <input type="hidden" name="res_id"	value="$CONTENTS{res_id}">
		   Salle/ressource : 
		   };
		   selObj ('objID', $res{obj_id} , 1);
		   print qq{<p>
		   <input type="submit" name="go" value="continuer">
		   </p>
		   };
		   
		  footpage ();
	
		}

		unless($res{unite}) {
		 $res{unite}  = getResSigleUnite (%res);
		}

		$CONTENTS{objID} =~ s/ //g;
	
		$CONTENTS{periodic} = $res{periodic};
		$CONTENTS{datedeb}  = $res{datedeb};
		$CONTENTS{datefin}  = $res{datefin};
		$CONTENTS{hdeb} 		= $res{hdeb};
		$CONTENTS{hfin} 		= $res{hfin};
		$CONTENTS{unite} 		= $res{unite};
		$CONTENTS{pool} 		= $res{pool};
		$CONTENTS{jour} 		= $res{jour};
		$CONTENTS{noms} 		= $res{nom};
		$CONTENTS{descr}		= $res{descr};
		$CONTENTS{date} 		= $res{dates};
		$CONTENTS{user} 		= $res{sciper};

		$CONTENTS{datedeb}  =~ s/\-//g;
		$CONTENTS{datefin}  =~ s/\-//g;

		if ($CONTENTS{periodic} eq "ponctuelle") {
			$CONTENTS{mode} = 0;
			my $date = $res{dates};
			$CONTENTS{date} = pop (@$date);
			&add_res ();
		} else {
			if ($CRT_periodic eq "quotidienne") {
				$CONTENTS{mode} = 1;
			} else {
				$CONTENTS{mode} = 2;
			}
			my @dates = &get_dates_from_name($CONTENTS{periodic}, $CONTENTS{jour}, $CONTENTS{datedeb}, $CONTENTS{datefin});
			&listdates($CONTENTS{objID}, $CONTENTS{date} , \@dates);
    }
  }

  &footpage;
}

#__________________
sub add_res {

   my $sel;
   
   print qq{<h3><img src=/images/agenda.gif >Gestion des réservations</h3>};

   $CONTENTS{ACC_TYPE} = 'W';
   if ($CONTENTS{objID}) {
   		erreur ("vous n'avez pas accès pour ajouter une réservation à cette ressource, veuillez contacter un administrateur", 1) unless objAccessAllowed ($CONTENTS{objID});
   } else {
   		erreur ("salle/ressource pas précisée") if $CONTENTS{pass} eq '0';
   }
   
   if ($CONTENTS{op} eq 'renew' or $CONTENTS{op} eq 'ignore') {
		
		disp_res($CONTENTS{res_id}, 1);

		if ($CONTENTS{op} eq 'ignore') {
			my $sql = qq{update res set datefin=? where id=?};
			dbquery($sql, $CONTENTS{date}, $CONTENTS{res_id});

			my %res = getRes($CONTENTS{res_id});
			callBack ({
				action => 'renew',
				res	 	 => \%res,
			});

			footpage ();
		}
		
		my %res 		 		= getRes($CONTENTS{res_id});
		$CONTENTS{date}	=~ s/\-//g;
		$CONTENTS{date} = $crt_date if $CONTENTS{date} < $crt_date;
		$CONTENTS{date}	= get_next_n_day($CONTENTS{date} , 1);
		my $next_date 	= $LAST_DATE;
		
		my $hdeb = substr($res{hdeb},0,2);
		my $mdeb = substr($res{hdeb},3,2);
		my $hfin = substr($res{hfin},0,2);
		my $mfin = substr($res{hfin},3,2);

		my $unite = $res{unite};
		my $pool  = $res{pool};

		print qq{
			<form action=$thescript/done_res name=form method=POST>
			  <input type=hidden name=mode   	value=2>
			  <input type=hidden name=pass   	value=0>
			  <input type=hidden name=op 	 		value=$CONTENTS{op}>
			  <input type=hidden name=user 	 	value=$res{sciper}>
			  <input type=hidden name=res_id 	value=$CONTENTS{res_id}>		
			  <input type=hidden name=objID 	value=$res{obj_id}>		
			  <input type=hidden name=noms  	value="$res{nom}">		
			  <input type=hidden name=descr 	value="$res{descr}">		
			  <input type=hidden name=periodic 	value=$res{periodic}>		
			  <input type=hidden name=jour  	value=$res{jour}>		
			  <input type=hidden name=hour1 	value=$hdeb>		
			  <input type=hidden name=min1  	value=$mdeb>		
			  <input type=hidden name=hour2 	value=$hfin>		
			  <input type=hidden name=min2  	value=$mfin>	
			  <input type=hidden name=unite 	value=$unite>	
			  <input type=hidden name=pool	 	value=$pool>	
			  <hr>
			  <p>Prolongation des dates pour la réservation périodique <b>$res{periodic} $res{jour}</b> du :
			   <input type="text" name="date1" id="date1" size="10" value="}.rev_date($CONTENTS{date}).qq{">,  jusqu'au : <input type="text" name="date2" id="date2" size="10" value="}.rev_date($next_date).qq{"> 
			  <input type=submit name=go value=enregistrer>
			  </form>
		
		};

		footpage ();

   }

   if ($CONTENTS{op} eq 'dup') {
		my %res 			= getRes($CONTENTS{res_id});
		$CONTENTS{res_id} 	= '';
		$CONTENTS{objID} 	= $res{obj_id};
		$CONTENTS{noms}		= $res{nom};
		$CONTENTS{descr} 	= $res{descr};
		$CONTENTS{hdeb} 	= $res{hdeb};
		$CONTENTS{hfin} 	= $res{hfin};
		$CONTENTS{unite} 	= $res{unite};
		$CONTENTS{date} 	= $crt_date;
		$CONTENTS{jour}		= $res{jour};
		$CONTENTS{periodic}	= $res{periodic};
		$CONTENTS{user}		= $res{sciper};
		$CONTENTS{pool}		= $res{pool};
		if ($res{periodic} eq 'ponctuelle') {
			$CONTENTS{mode} = '0';
		} elsif ($res{periodic} eq 'quotidienne') {
			$CONTENTS{mode} = '1';
		} else {
			$CONTENTS{mode} = '2';
		}
   }

   $CONTENTS{pool}		= 1 unless $CONTENTS{pool};
	
   if ($CONTENTS{mode} eq '0') {
     print "<b>réservation ponctuelle</b>";
   } elsif ($CONTENTS{mode} eq '1') {
     print "<b>réservation quotidienne</b>";
   } elsif ($CONTENTS{mode} eq '2') {
     print "<b>réservation périodique</b>";
   }
   print " - <font color=red><b>attention:</b> la date limite pour les réservations est le : <b>" . &rev_date($LAST_DATE,1) . qq{</b></font>};
   if ($allObjects->{$CONTENTS{objID}}->{objdata}->{datedeb} and $allObjects->{$CONTENTS{objID}}->{objdata}->{datedeb} ne '0000-00-00') {
   	print qq{<br><span style="color:red;">La ressource est inaccessible du }.rev_date($allObjects->{$CONTENTS{objID}}->{objdata}->{datedeb}).' au '.rev_date($allObjects->{$CONTENTS{objID}}->{objdata}->{datefin}).qq{</span>};
   }

   my $indispd1 = rev_date($userObjects->{$CONTENTS{objID}}->{objdata}->{datedeb});
   my $indispd2 = rev_date($userObjects->{$CONTENTS{objID}}->{objdata}->{datefin});

   print qq{
	  <hr><form action=$thescript/done_res name=form method=POST>
	  <input type=hidden name=mode 	 value=$CONTENTS{mode}>
	  <input type=hidden name=pass 	 value=0>
	  <input type=hidden name=res_id value=$CONTENTS{res_id}>
	  <input type=hidden name=objID  value=$CONTENTS{objID}>
	  <table>
	  <tr><td><b>salle/objet:</b><td>$userObjects->{$CONTENTS{objID}}->{objdata}->{nom}
	  <tr><td><b>description:</b><td>$userObjects->{$CONTENTS{objID}}->{objdata}->{descr}
	};
	
	#	- POOL
	if ($userObjects->{$CONTENTS{objID}}->{objdata}->{pool} > 1) {
		print qq{<tr><td><b>nombre d'objets:</b><td><input name="pool" value="$CONTENTS{pool}">
		(max nb. $userObjects->{$CONTENTS{objID}}->{objdata}->{max_pool})
		};
	}
	
	print qq{
		<tr><td><span style="color:red;">indisponible:</span><td>du $indispd1 au $indispd2} if $allObjects->{$CONTENTS{objID}}->{objdata}->{datedeb} and $allObjects->{$CONTENTS{objID}}->{objdata}->{datedeb}  ne '0000-00-00';
	print qq{
	  <tr><td><b>raison:</b><td><input name=noms value="$CONTENTS{noms}">
	  <tr><td><b>détails:</b><td><input name=descr value="$CONTENTS{descr}" size=48>
   };
 
   $CONTENTS{hdeb} = substr ($CONTENTS{date}, 8, 5) unless $CONTENTS{hdeb};
   $CONTENTS{hdeb} = $DEBUT unless $CONTENTS{hdeb};
   $CONTENTS{date} = substr ($CONTENTS{date}, 0, 8);
   unless ($CONTENTS{hfin})   { 
   		($hour,$rest) = split(/h/,$CONTENTS{hdeb}); $hour++;
   		$CONTENTS{hfin}= sprintf "%02dh%02d", $hour,$rest;
   }
   if ($CONTENTS{mode} eq '0') {
      print qq{
      	<tr><td><b>date:</b>
      	<td>le <input type="text" name="date1" id="date1" size="10" value="}.rev_date($CONTENTS{date}).qq{">
		<a href="#" 
			onClick="cal.select(document.getElementById('date1'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
		</a>
       };

      &pr_hhmm (" de ", 1, $CONTENTS{hdeb});
      &pr_hhmm (" à ", 2,  $CONTENTS{hfin});
   }
   
   my $next_date = get_next_n_day ($CONTENTS{date}, 7);
   if ($CONTENTS{mode} eq '1') {
      print qq{
        <tr><td><b>du:</b> 
        <td><input type="text" name="date1" id="date1" size="10" value="}.rev_date($CONTENTS{date}).qq{">
        <a href="#" 
			onClick="cal.select(document.getElementById('date1'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
		</a>
		<b>au:</b>
        <input type="text" name="date2" id="date2" size="10" value="}.rev_date($next_date).qq{">
		<a href="#" 
			onClick="cal.select(document.getElementById('date2'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
		</a>
        
		};
      &pr_hhmm (" de ", 1, $CONTENTS{hdeb});
      &pr_hhmm (" à ", 2,  $CONTENTS{hfin});
   }

   if ($CONTENTS{mode} eq '2') {
      print qq{
      	<tr><td valign=top><b>dates:</b>
        <td><b>du:</b> <input type="text" name="date1" id="date1" size="10" value="}.rev_date($CONTENTS{date}).qq{">
		<a href="#" 
			onClick="cal.select(document.getElementById('date1'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
		</a>
		
		<b>au:</b> <input type="text" name="date2" id="date2" size="10" value="}.rev_date($next_date).qq{">
		<a href="#" 
			onClick="cal.select(document.getElementById('date2'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
		</a>
      };      	

      print "  <select name=periodic>";
      foreach $per (sort keys(%periodics)) {
        $sel = '';
   	   	if ($CONTENTS{periodic} eq $per) { $sel = 'selected'; }
    	print "<option value=\'$per\' $sel>$periodics{$per} </option>";
      }
      print "</select> ";
      &pr_select('jour',$CONTENTS{jour},1,0,@noms_jours[1,2,3,4,5,6,0]);
      print " du mois ";
      print "<br>";
      &pr_hhmm (" de ", 1, $CONTENTS{hdeb});
      &pr_hhmm (" à ", 2,  $CONTENTS{hfin});
   }

	$CONTENTS{user} = $CONTENTS{sciper} unless $CONTENTS{user};
  if ($Admins->{$CONTENTS{sciper}}->{$CONTENTS{objID}}) {
		print "<tr><td valign=top><b>réservé pour</b>:<td>";
		if (defined $CONTENTS{unite} && !$allUnitsUsers->{$CONTENTS{unite}}->{$CONTENTS{user}}) {
			print qq{$CONTENTS{user} - no accred<br>};
			$CONTENTS{user} = '';
		}
	
		&sel_user('user', $CONTENTS{user}, '');

  } else {
		print qq{<input type=hidden name=user value=$CONTENTS{sciper}>
		<tr><td><b>réservé pour:</b><td> $dinfo->{$CONTENTS{sciper}}->{prenom}&nbsp;$dinfo->{$CONTENTS{sciper}}->{nom}
		};
  }

	getUserData ($CONTENTS{user});

  print qq{<tr><td><b>unité:</b><td id="div-unite">};

  my @accreds = sort { 
  		$dinfo->{$CONTENTS{user}}->{accreds}->{$a}->{ordre} cmp $dinfo->{$CONTENTS{user}}->{accreds}->{$b}->{ordre} 
  	} keys %{$dinfo->{$CONTENTS{user}}->{accreds}};
  if (scalar @accreds > 1) {
	   print qq{<select name="unite">};
	   my $selected = 'selected';
	   foreach my $unite (@accreds) {
	   	my $selected = $CONTENTS{unite} eq $unite ? 'selected' : '';
	   	print qq{<option value="$unite" $selected>$dinfo->{$CONTENTS{user}}->{accreds}->{$unite}->{sigle}</option>};
	   }
	   print qq{</select> (par ordre des priorités accred)};
   } else {
   	 my $unite = $accreds[0];
	   print qq{
	   	<input type="hidden" name="unite" value="$unite">
	   	$dinfo->{$CONTENTS{user}}->{accreds}->{$unite}->{sigle}
	   };	#	- unité défaut
   }
   print "</table>";
   print "<br><input type=submit value=enregistrer>   <input type=reset  value=reset>";
   print "</form>";

   &footpage;
}

#__________________
sub getResSigleUnite {
  my (%res) = @_;

  return unless $res{sciper};
  getUserData ($res{sciper}) unless defined $dinfo->{$res{sciper}}->{accreds};
  return $dinfo->{$res{sciper}}->{accreds}->{$res{unite}}->{sigle} if $res{unite};
  my @accreds = sort {$dinfo->{$CONTENTS{sciper}}->{accreds}->{$a}->{ordre} cmp $dinfo->{$CONTENTS{sciper}}->{accreds}->{$b}->{ordre}} keys %{$dinfo->{$res{sciper}}->{accreds}};
  return $dinfo->{$res{sciper}}->{accreds}->{$accreds[0]}->{sigle} ;
  
}

#__________________
sub done_res {

   $CONTENTS{hdeb} = $CONTENTS{hour1}.'h'.$CONTENTS{min1};
   $CONTENTS{hfin} = $CONTENTS{hour2}.'h'.$CONTENTS{min2};

   erreur ("veuillez choisir la salle ou l'objet de réservation", 1) unless $CONTENTS{objID} ;
   erreur ("donner la raison de la réservation, svp.", 1) 			 unless $CONTENTS{noms} ;
   erreur ("le début de réservation est après la fin", 1) 			 if $CONTENTS{hdeb} gt $CONTENTS{hfin};
   
   my $obj = $allObjects->{$CONTENTS{objID}}->{objdata};

   erreur("ressource inconnue") unless $obj;
   if ($obj->{pool} > 1) {
	  erreur ("nb d'objets non numérique", 1) if $CONTENTS{pool} and $CONTENTS{pool} =~ /\D/;
	  erreur ("nb d'objets réservés ($CONTENTS{pool}) dépasse la taille du pool ($obj->{pool})", 1)	if $CONTENTS{pool} and $CONTENTS{pool} > $obj->{pool};
	  erreur ("max $obj->{max_pool} objets par réservation", 1) if $CONTENTS{pool} and $CONTENTS{pool} > $obj->{max_pool};
   } else {
   	  $CONTENTS{pool} = 1;
   }
   
   $CONTENTS{descr} =~ s/\t+/ /g;
   $CONTENTS{descr} =~ s/\n/ /g;
   $CONTENTS{noms}  =~ s/\t+/ /g;

#	- res ponctuelle ----
   if ($CONTENTS{mode} eq '0') {
			$CONTENTS{periodic} = "ponctuelle";
			$CONTENTS{dates} 	= &valid_date($CONTENTS{date1}, $CONTENTS{objID});
			my @dates 			= split (/ /, $CONTENTS{dates});

			&resConflict($CONTENTS{objID}, $CONTENTS{res_id}, $CONTENTS{hdeb}, $CONTENTS{hfin}, $CONTENTS{pool}, \@dates);
			erreur ("conflit de dates ou pool d'objets indisponible") unless scalar @dates;

			foreach $td (@dates) {
				erreur ("objet/salle indisponible - contacter votre administateur de l'application") unless (&objDispo($CONTENTS{objID}, $td));
			}

			my $res = {
			nom 		=> $CONTENTS{noms},
			sciper  => $CONTENTS{user},
			objID   => $CONTENTS{objID},
			descr 	=> $CONTENTS{descr},
			datedeb	=> $CONTENTS{dates},
			datefin	=> $CONTENTS{dates},
			dates		=> \@dates,
			jour 		=> $CONTENTS{jour},
			periodic=> $CONTENTS{periodic},
			hdeb 		=> $CONTENTS{hdeb},
			hfin 		=> $CONTENTS{hfin},
			unite 	=> $CONTENTS{unite},
			pool 		=> $CONTENTS{pool},
			};

			if ($CONTENTS{res_id}) {
				$res->{res_id} = $CONTENTS{res_id};
				majRes ($res);
			} else {
				addRes ($res);
			}

			&footpage;	

   }

#	- res multiple ----
   $CONTENTS{periodic} = $DAILY if ($CONTENTS{mode} eq '1');
   my @sel_dates;

   if ($CONTENTS{pass} eq '0') {
	  my $date1 = &valid_date($CONTENTS{"date1"}, $CONTENTS{objID});
	  my $date2 = &valid_date($CONTENTS{"date2"}, $CONTENTS{objID});
	  my @dates = &get_dates_from_name($CONTENTS{periodic}, $CONTENTS{jour}, $date1, $date2);
	  erreur ("aucune date qui correspond à votre sélection") unless scalar @dates;

	  &resConflict($CONTENTS{objID}, $CONTENTS{res_id}, $CONTENTS{hdeb}, $CONTENTS{hfin}, $CONTENTS{pool}, \@dates);
	  foreach $td (@dates) {
	  	if (&objDispo($CONTENTS{objID}, $td)) {
			push @sel_dates, $td;
		} else {
			print "<br><font color=red>date: ".&rev_date($td)." - objet/salle indisponible</font>
			- contacter votre administateur de l\'application";
		}
	  }
  
	  &listdates ($CONTENTS{objID}, \@sel_dates, \@sel_dates);
   } else {
	  foreach $td (split (/ /, $CONTENTS{dates})) {
	  	if (&objDispo($CONTENTS{objID}, $td)) {
			push @sel_dates, $td;
		} else {
			print "<br><font color=red>date: ".&rev_date($td)." - objet/salle indisponible</font>
			- pas de réservation pour cette date";
		}
	  }

	  &resConflict($CONTENTS{objID}, $CONTENTS{res_id}, $CONTENTS{hdeb}, $CONTENTS{hfin}, $CONTENTS{pool}, \@sel_dates);

	  my $res = {
		nom 		=> $CONTENTS{noms},
		pool 		=> $CONTENTS{pool},
		res_id 	=> $CONTENTS{res_id},
		sciper  => $CONTENTS{user},
		objID   => $CONTENTS{objID},
		descr 	=> $CONTENTS{descr},
		datedeb	=> $CONTENTS{datedeb},
		datefin	=> $CONTENTS{datefin},
		dates		=> \@sel_dates,
		jour 		=> $CONTENTS{jour},
		periodic=> $CONTENTS{periodic},
		hdeb 		=> $CONTENTS{hdeb},
		hfin 		=> $CONTENTS{hfin},
		unite 	=> $CONTENTS{unite},
	  };

	if ($CONTENTS{done_res} or $CONTENTS{op}) {
		$res->{res_id} = $CONTENTS{res_id};
	  	majRes ($res)
	  } else {
			addRes ($res);
	  }
	  &footpage;	
   }

}

#----
sub valid_date {
  my ($date, $obj_id) = @_;
  erreur ("date de réservations et identification de salle absents") unless ($date and $obj_id);
  
  my $tdate = &check_date($date);

  if ($tdate lt $crt_date) {
	&erreur ("date: ".&rev_date($tdate)." déjà passée") unless $Admins->{$CONTENTS{sciper}}->{$obj_id};
  }
  if ($tdate gt $LAST_DATE) {
	&erreur ("date: ".&rev_date($tdate,1)." au-delà de la date limite des réservations: ". &rev_date($LAST_DATE,1));
  }
  
  erreur ("Les réservations pour $userObjects->{$obj_id}->{objdata}->{nom} pour cette date [".rev_date($tdate)."] sont accèssibles seulement aux administrateurs", 1) unless objDispo($obj_id, $tdate);

  return ($tdate);
}

#__________________
sub objDispo {
  my ($objID, $date) = @_;
  return 	unless $objID and $date;

  return 1 	unless ($userObjects->{$objID}->{objdata}->{disp});

  return i  if $Admins->{$CONTENTS{sciper}}->{$objID} ;	# - accès restreint - admin
  my $d1 = $userObjects->{$objID}->{objdata}->{datedeb};
  my $d2 = $userObjects->{$objID}->{objdata}->{datefin};
  	 $d1 =~ s/\-//g;
 	   $d2 =~ s/\-//g;

  return 1 unless ($date ge $d1 and $date le $d2);
  return 0;

}

#__________________
sub listdates {
  my ($objID, $seldates, $dates) = @_;
  my ($hour, $rest);
 
   print qq{
   <form action="$thescript/done_res" name="form" method=POST>
   <input type="hidden" name="old_obj" 	value="$CONTENTS{objID}">
   <input type="hidden" name="op" 		value="$CONTENTS{op}">
   <input type="hidden" name="mode" 	value="$CONTENTS{mode}">
   <input type="hidden" name="pass" 	value="1">
   <input type="hidden" name="res_id"	value="$CONTENTS{res_id}">
   <input type="hidden" name="periodic" value="$CONTENTS{periodic}">
   <input type="hidden" name="jour" 	value="$CONTENTS{jour}">
   <input type="hidden" name="objID" 	value="$objID">
   <input type="hidden" name="pool" 	value="$CONTENTS{pool}">
   <input type="hidden" name="unite" 	value="$CONTENTS{unite}">
   <hr>
   <table width="100%" border="0">
   <tr><td><b>salle/objet:</b><td> $userObjects->{$CONTENTS{objID}}->{objdata}->{nom}
   };

   my $datefin = pop @$dates;
   my $datedeb = shift @$dates;
   unless ($datedeb) {
	$datedeb = $datefin;
   } else {
	unshift @$dates, $datedeb;
   }
   push    @$dates, $datefin;

   print qq{<input type="hidden" name="datedeb" value="$datedeb">};
   print qq{<input type="hidden" name="datefin" value="$datefin">};

   print qq{
   <tr><td><b>raison:</b><td><input 	name="noms"  value="$CONTENTS{noms}">
   <tr><td><b>détails:</b><td><input 	name="descr" value="$CONTENTS{descr}" size="48">
   <tr><td><b>dates:</b><br>(<i>choix multiple</i>)<td><table>
   <tr><td width="300">
   	<select name="dates" multiple size="15">
   };

   foreach $d1 (@$dates) {
   	my $selected = '';
   	foreach my $d2 (@$seldates) {
   	 $selected = 'selected' if $d1 eq $d2;
   	}
	print "<option value=$d1 $selected> ".&rev_date($d1)." ".&get_day_name($d1)."</option>\n";
   }
   print "</select><p>\n";
   &pr_hhmm (" de ", 1, $CONTENTS{hdeb});
   $CONTENTS{hdeb} = $DEBUT unless $CONTENTS{deb};
   unless ($CONTENTS{hfin})   
   {
			($hour,$rest) = split(/h/,$CONTENTS{hdeb});
			$hour++;
			$CONTENTS{hfin} = $hour.'h'.$rest;
   }
   &pr_hhmm (" à ", 2, $CONTENTS{hfin});
   print "<td>Pour cette réservation vous avez choisi les dates ci-contre.
   <br>Pour enlever certaines dates, désélectionner les valeurs; pour en rajouter,
   revenir sur la page précedente (bouton <b>Back</b>) et faire votre nouveau choix
   <p>ATTENTION, pour les opérations de sélection et désélection, veuillez consulter
	le mode d'emploi de votre browser (à l'aide des touches &lt;Shift&gt;, &lt;CTRL&gt; 
	ou &lt;cmd&gt;)\n";
   print "</table>";

   if ($Admins->{$CONTENTS{sciper}}->{$objID}) {
			print "<tr><td valign=top><b>réservé pour:</b><td>";
			&sel_user('user',$CONTENTS{user}, '-- choisir --');
   } else {
   		print "<input type=hidden name=user value=$CONTENTS{sciper}>\n";
   }
   print qq{
    </table>
   	<p><input type=submit value=enregistrer> ---- <input type=reset  value=reset>
   	</form>
   };
   &footpage;	
}

#__________________
sub gestion {

   ges_res() 	  		if $CONTENTS{op} eq 'res';
   ges_obj () 			if $CONTENTS{op} eq 'obj' ; 
   list_conflits () if $CONTENTS{op} eq 'conflit' ;
   
}

#__________________
sub ges_res {
  my ($realuser)   = @_;

   print "<h2>Consultation et gestion des réservations </h2>\n";
   
# - consultation
   print qq{
   	<form name="form" action="$thescript/cons_res" method="post">
   	<h4>Consulter les réservations</h4>
   };
	
   checkConflicts ();
	
	print qq{
	<table>
	<tr>
	<td valign=top><b>Ressource/salle : (sélection multiple possible)</b> </td>
	<td>
	};
	selObj ('objID','',1, 'multiple');
	my $lastdate = &get_next_n_day($crt_date,31);
	print qq{
	<tr>
	<td colspan=2><b>Du</b> <input name="date1" id="date1" size="10" value="}.rev_date($crt_date).qq{">
		<a href="#" 
			onClick="cal.select(document.getElementById('date1'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0"></a>&nbsp;
		<b>au</b> <input name="date2" id="date2" size="10" value="}.rev_date($lastdate).qq{">
		<a href="#" 
			onClick="cal.select(document.getElementById('date2'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
		</a>
		
		<tr>
			<td><b>Filtrer par mots clés</b> de la raison de réservation :<br>(séparés par espace)
			<td colspan="2"><input name="motcle" size="48">
		</tr>

	 </table>
	 <br><input type="submit" name="go" value="afficher"></p>
	 </ul>
   	</form>
   	};

   &footpage;
}

#__________________
sub sel_user {
  my ($param, $value, $all) = @_;
  my @objUsers = getObjUsers ($CONTENTS{objID});
  erreur ("Aucun utilisateur pour cette ressource, veuillez avertir le support technique") unless scalar @objUsers;

  print qq{<select name="$param" id="users" onchange="getUserAccreds('users');">};
  print qq{<option value="" selected>$all</option>} if $all;
  print qq{<option value="-1" selected>-- choisir --</option>} unless $value;
  foreach my $sciper (sort {lc($dinfo->{$a}->{nom}) cmp lc($dinfo->{$b}->{nom})} @objUsers) {
  	next unless $dinfo->{$sciper}->{nom};
  	my $selected = $sciper eq $value ? 'selected' : '';
  	print qq{<option value="$sciper" $selected>$dinfo->{$sciper}->{nom} $dinfo->{$sciper}->{prenom}</option>}
  }
  print qq{</select>};

}

#__________________
sub cons_res {

	my $date1 = &check_date($CONTENTS{date1});
	my $date2 = &check_date($CONTENTS{date2});

  print  qq{
	<h2><img src=/images/agenda.gif >Consultation des réservations </h2>
	du }.rev_date($date1)." au ".rev_date($date2);

	listRes ($date1, $date2, $CONTENTS{objID}, $CONTENTS{sciper_todo});
	
  footpage;
}

#__________________
sub pr_hhmm {
  my ($texte, $index, $value) = @_;
  my $selected;
  my @minutes = (00, 15, 30, 45);

  print "<b>$texte:</b>   <select name=hour${index}>";
  for ($h = $DEBUT; $h <= $FIN; $h++) {
      $h = sprintf "%02d", $h;
      $selected = '';
	  if ($h eq substr($value,0,2)) { $selected = 'selected'; }
	  print "<option $h $selected>$h</option>\n";
  }
  print "</select>";
  print " h <select name=min${index}>";
  foreach $m (@minutes) {
      $m = sprintf "%02d", $m;
      $selected = '';
      if ($m eq substr($value,3,2)) { $selected = 'selected'; }
      print "<option $m $selected>$m</option>\n";
  }
  print "</select>";
}

#__________________
sub done_obj {

   print  qq{<h1>Mise à jour d'une ressource</h1>};

   unless ($superusers =~ /\b$CONTENTS{sciper}\b/) {
	   if ($CONTENTS{objID}) {
	   	erreur ("pas de droits de gestion pour cette ressource") unless exists $Admins->{$CONTENTS{sciper}}->{$CONTENTS{objID}};
	   } else {
	   	erreur ("pas de droits de gestion des objets de réservation") unless exists $Admins->{$CONTENTS{sciper}};
	   }
   }
   
   my $errors;
   $CONTENTS{nom} 	=~ s/^\s+//g;
   $CONTENTS{nom} 	=~ s/\s+$//g;
   $CONTENTS{descr} =~ s/^\s+//g;
   $CONTENTS{descr} =~ s/\s+$//g;
   $CONTENTS{pool}  = 1 unless $CONTENTS{pool};

   $errors .= qq{nom ressource vide <br>} 									unless $CONTENTS{nom};
   $errors .= qq{description de la ressource vide<br>} 			unless $CONTENTS{descr};
   $errors .= qq{nombre d'objets du pool non-numérique<br>} if $CONTENTS{pool} and $CONTENTS{pool} =~ /\D/;
   $errors .= qq{nb max d'objetsen réservation plus grand que le pool<br>} if $CONTENTS{max_pool} > $CONTENTS{pool};
	 if ($CONTENTS{disp} eq 'r' || $CONTENTS{disp} eq 'i') {
warn "--> done_obj: $CONTENTS{date1}, $CONTENTS{date2}\n";
	 	   $errors .= qq{dates d'indisponibilité pas précisées} unless $CONTENTS{date1} && $CONTENTS{date2};
	 }
   erreur ($errors);

	 if ($CONTENTS{date1} || $CONTENTS{date2}) {
		 $errors .= qq{'dates d\'indisponibilité pas précisées'} unless $CONTENTS{date1} && $CONTENTS{date2};
		 my ($tday, $tmon, $tyear) = split (/\//, $CONTENTS{date1});
			($tday, $tmon, $tyear) 	 = split (/\./, $CONTENTS{date1}) unless $tday and $tmon and $tyear;
		 my $date = &check_date($CONTENTS{date1});
		 $CONTENTS{datedeb} = sprintf "%4d-%02d-%02d", $tyear, $tmon, $tday;

		 my ($tday, $tmon, $tyear) = split (/\//, $CONTENTS{date2});
			($tday, $tmon, $tyear) = split (/\./, $CONTENTS{date2}) unless $tday and $tmon and $tyear;
		 my $date = &check_date($CONTENTS{date2});
		 $CONTENTS{datefin} = sprintf "%4d-%02d-%02d", $tyear, $tmon, $tday;
	 }
   my $obj = {
		id	 		=> $CONTENTS{objID},
		nom 		=> $CONTENTS{nom},
		pool 		=> $CONTENTS{pool},
		max_pool=> $CONTENTS{max_pool},
		descr 	=> $CONTENTS{descr},
		disp 		=> $CONTENTS{disp},
		visible	=> $CONTENTS{visible},
		datedeb => $CONTENTS{datedeb},
		datefin => $CONTENTS{datefin},
		access 	=> $CONTENTS{access},
		plan 		=> $CONTENTS{plan},
		unites 	=> $CONTENTS{unites},
		groupes	=> $CONTENTS{groupes},
		hide	 	=> $CONTENTS{hide},
   };
   
   my $objID = majObject ($obj);
   
   print qq{
   opération effectuée : <a href="$thescript/gestion?op=obj">retour à la liste des ressources</a>
   };
   
   &footpage;
}

#__________________
sub popup {

   my $objID = $CONTENTS{objID};
   erreur ("opérations en accès réservé") unless $Admins->{$CONTENTS{sciper}};
   
   if ($CONTENTS{add}) {
		my $add_item = $CONTENTS{add_item};
		error('unité/groupe pas précisé') unless $add_item;

		my @items = $CONTENTS{type} eq 'unites' 
					? getAllUnits($CONTENTS{add_item})
					: map { $_->{name} } $Groupes->searchGroup($CONTENTS{add_item});
#warn "items\n".Dumper(@items);
		erreur('élément pas trouvé') if $#items < 0;
		my %crtitems;
		foreach my $item (split(/,/, uc($CONTENTS{items}))) {
			$crtitems{$item} = 1;
		} 
		foreach my $item (@items) {
			$crtitems{$item} = 1;
		}

		$CONTENTS{items} = join ',', keys %crtitems;

	} elsif ($CONTENTS{del}) {
		my $del_item = $CONTENTS{del_item};
		$CONTENTS{items} = ",$CONTENTS{items}";
		erreur("aucune unité précisée") unless $del_item;
		$CONTENTS{items} =~ s/,$del_item//;
		$CONTENTS{items} =~ s/$del_item,//;
		$CONTENTS{items} =~ s/,,//;
	} 
	
	my $txt1 = $CONTENTS{type} eq 'unites' 
			? qq{Rattachement automatique aux unités suivantes}
			: qq{Rattachement automatique aux groupes suivants};
	my $txt2 = $CONTENTS{type} eq 'unites' 
			? qq{ajouter une unité}
			: qq{ajouter un groupe}; 
	my $txt3 = "ajouter";
	my $txt4 = $CONTENTS{type} eq 'unites' 
			? qq{liste des unités}
			: qq{liste des groups}; 
	my $txt5 = $CONTENTS{type} eq 'unites' 
			? qq{sigle EPFL}
			: qq{nom groupe}; 

	print qq{
	<b>$txt1:</b>
	<ul>

	<form name="units_form" action="$thescript/popup" method="POST">
	<input type="hidden" name="items" id="items" value="$CONTENTS{items}">
	<input type="hidden" name="type" 	id="type"  value="$CONTENTS{type}">
	<table width="100%">
	 <tr>
	   <td align="right"><b>$txt2 :</b><br>
		(<em>$txt5</em>)</td>
	   <td><input name="add_item" size="15"> <input type="submit" name="add" value="$txt3"></td>
	 <tr height=10><td colspan=2></tr>  
	};

	if ($CONTENTS{items}) {
		print qq{
		<tr><td width="150" align="right" valign="top"><b>$txt4 :</b> </td>
		<td>
		};
		foreach my $item (sort split(/,/, $CONTENTS{items})) {
			next unless $item;
			print qq{<a href=$thescript/popup?del=1&del_item=$item&items=$CONTENTS{items}><img src=/images/ko.gif border="0"> $item</a><br>}
		}
	}
	print qq{
	</form>
	</table>
	</ul>
	<p>
			<a href="#" onclick=" 
				if ( document.getElementById('type').value == 'unites') {
					opener.document.form1.unites.value  = '$CONTENTS{items}';
				} else {
					opener.document.form1.groupes.value  = '$CONTENTS{items}';
				}
				;window.close();
				">Accepter</a> 
	</p>
	};
	exit;
}

#_________
sub logs {

   my $objID = $CONTENTS{objID};
#   erreur ("opérations en accès réservé") unless $Admins->{$CONTENTS{sciper}} or $superusers =~ /\b$CONTENTS{sciper}\b/;
   erreur ("salle/objet absent") unless ($objID) ;

	my $title = ($Admins->{$CONTENTS{sciper}} or $superusers =~ /\b$CONTENTS{sciper}\b/) ? qq{Logs pour} : qq{Mes logs pour };
	print qq{
	<style>
	.head	{ font-weight:bold; }
	</style>
	<h3>$title $allObjects->{$objID}->{objdata}->{nom}</h3><br>
		<div class="head" style="float:left;width:150px;">Date</div>
		<div class="head" style="float:left;width:150px;">Nom</div>
		<div class="head" style="float:left;width:400px;">Action</div>
		<div class="clear"></div>
		<br>
	
	};
	my $sql = qq{select * from logs where obj_id=?};
	my @params = ($objID);
	unless ($Admins->{$CONTENTS{sciper}} or $superusers =~ /\b$CONTENTS{sciper}\b/) {
		$sql .= qq{ and sciper=?} ;
		push @params, $CONTENTS{sciper};
	}
	$sql .= qq{ order by ts desc} ;
  my $sth = dbquery($sql, @params);

	while (my $data = $sth->fetchrow_hashref) {
		$data->{msg} = decode('UTF-8', $data->{msg});
		print qq{
		<div style="float:left;width:150px;">$data->{ts}</div>
		<div style="float:left;width:150px;">$dinfo->{$data->{sciper}}->{nom} $dinfo->{$data->{sciper}}->{prenom}</div>
		<div style="float:left;width:400px;">$data->{msg}</div>
		<div class="clear"></div>
		};
	}

   footpage ;

}

#_________
sub extract {

#   erreur ("opérations en accès réservé") unless $Admins->{$CONTENTS{sciper}} or $superusers =~ /\b$CONTENTS{sciper}\b/;

	&header () unless $CONTENTS{csv};
	
	my $date1 = sprintf "%04d%02d01",   $year, $mon;
	my $date2 = sprintf "%04d%02d%02d", $year, $mon, $mois[$mon];

	unless ($CONTENTS{csv}) {
		print qq{
		<h3>Extraction des réservations</h3><br>
		Extraction des réservations en format <b>csv</b> :
		<form action="$thescript/extract" name="form" method="POST" >
		<input type="hidden" name="csv" value="1">
		<b>Objet/salle</b> : 
		};
		selObj ('objID', '', 5, 'multiple','extractobjid');
		print qq{

		<b>du:</b> <input type="text" name="date1" id="date1" size="10" value="}.rev_date($date1).qq{">
		<a href="#" 
			onClick="cal.select(document.getElementById('date1'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
		</a>
	
		<b>au:</b> <input type="text" name="date2" id="date2" size="10" value="}.rev_date($date2).qq{">
		<a href="#" 
			onClick="cal.select(document.getElementById('date2'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
		</a>
		<input type="submit" name="go" value="extraire">
		</form>
		<hr>
		};

	   footpage ;

	} else {	
		my $date1	= &check_date($CONTENTS{date1});
		my $date2	= &check_date($CONTENTS{date2});
		erreur (qq{date début après la date de fin}, 1) if $date1 gt $date2;

		print "Content-type: text/csv\n"; 
		my $filename = qq{reservations$date1.$date2.csv};
		print qq{Content-Disposition: attachement; filename="$filename"\n\n};

		my $output = listRes ($date1, $date2, $CONTENTS{objID});
		print $output;

		exit;

	}	
}

#__________________
sub maj_obj {

   my $objID = $CONTENTS{objID};
   my ($obj, $title, $nom, $descr, $disp, $visible, $visip, $visir, $datedeb, $datefin, $plan, $admins, $users, $disp1, $disp2, $disp3, $unites, $groupes, $hide);
   
   erreur ("opérations en accès réservé") unless $Admins->{$CONTENTS{sciper}} or $superusers =~ /\b$CONTENTS{sciper}\b/;
   
   if ($objID) {
   	 $obj = $allObjects->{$objID}->{objdata};
   	 erreur ("ressource pas trouvée [$objID]") 		   unless scalar %$obj;
   	 erreur ("pas de droits de gestion pour cet objet") unless $Admins->{$CONTENTS{sciper}}->{$objID}  or $superusers =~ /\b$CONTENTS{sciper}\b/;
  	 
  	 if ($CONTENTS{op} eq 'del') {
  	 	delObject ($obj);
  	 	
  	 	print qq{
  	 	<h3>Annulation : $obj->{nom}</h3>
  	 	$obj->{descr}
  	 	<p>
  	 	Les réservations et les droits d'accès à cette ressource sont effacés.<br>
  	 	Tous les utilisateurs de cette ressource ayant activé les anonces par mail ont été avertis de cette opération
   	 	</p>
	    <a href="$thescript/gestion?op=obj">retour à la liste des ressources</a>
  	 	};
  	 	footpage();
  	 }
  	 
  	 $title 	= qq{Mise à jour d'une ressource};
  	 $nom 		= $obj->{nom};
  	 $descr 	= $obj->{descr};
  	 $disp 		= $obj->{disp};
  	 $visible	= $obj->{visible};
  	 $datedeb = $obj->{datedeb};
  	 $datefin = $obj->{datefin};
  	 $plan 		= $obj->{plan};
  	 $unites	= $obj->{unites};
  	 $groupes	= $obj->{groupes};
  	 $nom 		= $obj->{nom};
  	 $nom 		= $obj->{nom};
  	 $pool 		= $obj->{pool};
  	 $max_pool= $obj->{max_pool};
  	 $hide		= 'checked' if $obj->{hide};
  	 $visip		= 'checked' unless $visible eq 'r';
  	 $visir		= 'checked' if $visible eq 'r';
  	 $disp1		= 'checked' if $disp eq 'd';
  	 $disp2		= 'checked' if $disp eq 'r';
  	 $disp3		= 'checked' if $disp eq 'i';
   } else {
		 $title = qq{Ajouter une ressource};
		 $visip = 'checked';
		 $disp1	= 'checked';
   }
   $datedeb  =~ s/\-//g;
   $datefin  =~ s/\-//g;
	 $pool 	   = 1 unless $pool;
	 $max_pool = 1 unless $max_pool;

   print  qq{<h1>$title</h1>
   <form name="form1" action="$thescript/done_obj" method="post">
   <input name="objID" type="hidden" value="$objID">
   Les champs en gras sont obligatoires
   <table>
   <tr>
     <td align="right" width="200"><b>Nom</b></td>
     <td><input name="nom" width="48" value="$nom"></td>
   </tr>
   <tr>
     <td align="right" width="200"><img src="/images/new_small.gif"> <b>Ressource de type <em>pool</em> <br>nombre d'objets</b></td>
     <td><input name="pool" value="$pool"> (1 si la ressource est unique)</td>
   </tr>
   <tr>
     <td align="right" width="200"> Nb max d'objets par réservation</td>
     <td><input name="max_pool" value="$max_pool"></td>
   </tr>
   <tr>
     <td align="right" width="200" valign="top"><b>Description</b></td>
     <td><textarea name="descr" cols="48" rows="3">$descr</textarea></td>
   </tr>

   <tr>
     <td align="right" valign="top" width="200" valign="top"><b>Droit de réservation implicite</b></td>
   </tr>

   <tr>
     <td align="right" valign="top" width="200" valign="top"><b>Unités</b></td>
     <td>
	 <input name="unites" id="unites" value="$unites" size="72" OnClick="window.open('$thescript/popup?type=unites&items='+document.getElementById('unites').value,'absres','height=640,width=640,scrollbars=yes');"> (sigles)</td>
   </tr>

   <tr>
     <td align="right" valign="top" width="200" valign="top"><b>Groupes</b></td>
     <td>
	 <input name="groupes" id="groupes" value="$groupes" size="72" OnClick="window.open('$thescript/popup?type=groupes&items='+document.getElementById('groupes').value,'absres','height=640,width=640,scrollbars=yes');"> (identificateurs)</td>
   </tr>

   <tr>
     <td align="right" width="200" valign="top"><span style="color: red; font-weight: bold;">Masquer la ressource</span></td>
     <td>
       <input type="checkbox" name="hide" value="1" $hide> ressource visible seulement pour les ayants-droit<br>
     </td>
   </tr>
   
   <tr>
     <td align="right" width="200" valign="top"><b>Visibilité des réservations</b></td>
     <td>
       <input type="radio" name="visible" value="p" $visip> ouverte (toute personne authentifiée Tequila)<br>
       <input type="radio" name="visible" value="r" $visir> restreinte (selon droits implicites ou explicites)<br>
     </td>
   </tr>
   <tr>
     <td align="right" width="200" valign="top"><b>Accès pour réservations</b></td>
     <td>
       <input type="radio" name="disp" value="d" $disp1> disponible (accès implicites ou explicites)<br>
       <input type="radio" name="disp" value="r" $disp2> restreint (réservé aux administrateurs et aux accès explicites)<br>
       <input type="radio" name="disp" value="i" $disp3> indisponible (réservé aux administrateurs)<br>
       <span style="color:red; margin-right:10px;">indisponible 
       	du <input name="date1" id="date1" size="10" value="}.rev_date($datedeb).qq{">
		<a href="#" 
			onClick="cal.select(document.getElementById('date1'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
		</a>

       	au <input name="date2" id="date2" size="10" value="}.rev_date($datefin).qq{">
		<a href="#" 
			onClick="cal.select(document.getElementById('date2'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
		</a>
		</span>
		<input type="button" name="reset" value="supprimer" onclick="
			document.getElementById('date1').value='';
			document.getElementById('date2').value='';
			">

     </td>
   </tr>
   <tr>
     <td align="right" width="200">Plan </td>
     <td><input type="text" name="plan" size="32" value="$plan"> 	libellé du local (p.ex. ma a0 364) - chercher sur <a href="https://plan.epfl.ch/" target="_blank">plan.epfl.ch</a></td>
   </tr>
   </table>
   <p><input style="background-color: yellow;" name="maj" type="submit" value="enregistrer"></p>
   </form>
   };

   &footpage;
}

#__________________
sub ges_user {

	my $scipertodo = $CONTENTS{scipertodo};
	return unless $scipertodo;

	my @users = searchUser ($scipertodo);

	erreur ("personne pas trouvée : $scipertodo")	unless $users[0];
	
	foreach my $objID (split (/ /, $CONTENTS{objects})) {
	 if ($CONTENTS{droit_$objID}) {
		 majUser ({
			sciper => $scipertodo, 
			droit  => $CONTENTS{droit_$objID}, 
			obj_id => $objID,
			mail   => $CONTENTS{mail_$objID},
		});
	 } else {
		 delUser ($scipertodo, $objID);
	 }
	}
	
#   $CONTENTS{op} = 'usr';
#   $CONTENTS{nom_usr} = $scipertodo;
   print qq{
		<script language=Javascript>
			location.href='$thescript/search?op=usr&nom_usr=$scipertodo';
		</script>
   };
   
   footpage ();
  
}

#__________________
sub zombies {

   erreur ("accès réservé") unless isSuperUser($CONTENTS{sciper});

   if ($CONTENTS{type} eq 'obj') {
		my $sql = qq{SELECT obj.* from users left outer join obj on obj.id=users.obj_id where sciper is null};
	  my $sth = dbquery($sql);

		my %objects;
		while (my $data = $sth->fetchrow_hashref) {
			$objects{$data->{id}} = $data;
		}
		
		if (scalar keys %objects) {
			disp_obj (%objects) 
		} else {
			print qq{<h3>zombies</h3>
			Aucun objet sans administrateur}
		}

   }

   if ($CONTENTS{type} eq 'usr') {
   }
   
   &footpage();

}

#__________________
sub search {
	
	if ($CONTENTS{op} eq 'obj') {
		my $nom = $CONTENTS{nom_obj};
		erreur ("le nom de la salle ou de l'objet recherché absent", 1) unless $nom;
		my %objects;
		my $count=0;
		$nom =~ s/\s//g;
		$nom =~ s/'/''/g;
		my $sql = qq{select * from obj where replace(nom, ' ', '') like '%$nom%' };
	  my $sth = dbquery($sql);

		while (my $data = $sth->fetchrow_hashref) {
	  	next unless objAccessAllowed ($data->{id});
			$objects{$data->{id}} = $data;
			$count++;
		}
		erreur ("aucune ressource ne correspond à votre recherche : $nom", 1) if $count == 0;
	
		disp_obj (%objects);
		
		&footpage();
	}

	if ($CONTENTS{op} eq 'usr') {
		erreur ("saisir le nom de la personne", 1) unless $CONTENTS{nom_usr};
		my @users = searchUser ($CONTENTS{nom_usr});
		erreur ("nom pas trouvé")	unless scalar @users;
		if ($#users == 0) {
			my $scipertodo  = pop @users;

			my $userObj;
			if ( $scipertodo eq $CONTENTS{sciper}) {
				$userObj = $userObjects ;
			} else {
				getObjects ($scipertodo);
				foreach my $objID (keys %$allObjects) {
					$userObj->{$objID}->{objdata} =  $allObjects->{$objID}->{objdata} if defined $allObjects->{$objID}->{usrdata}->{$scipertodo};
				}
			}
			
			print qq{
			<h2>Ressources et droits pour $dinfo->{$scipertodo}->{nom} &nbsp;$dinfo->{$scipertodo}->{prenom}</h2>
			<table border="1" width="100%" cellpadding="2" cellspacing="0">
			<th width="85%"><b>Ressource</b>
			<th><b>Droits</b>
			};

			foreach my $obj_id (sort {$userObj->{$a}->{objdata}->{nom} cmp $userObj->{$b}->{objdata}->{nom}} keys %$userObj) {
				next unless $obj_id;
				my $droit = $allObjects->{$obj_id}->{usrdata}->{$scipertodo}->{droit} eq 'A'
										 ? 'gestion' 
										 : $userObj->{$obj_id}->{objdata}->{droit} eq 'R'
										 		? 'consultation'
										 		: 'réservation';

				print qq{
				<tr>
				 <td><b>$userObj->{$obj_id}->{objdata}->{nom}</b> ($userObj->{$obj_id}->{objdata}->{descr})
				 <td>$droit
				};					
			}
			print qq{</table>};

			if (scalar %{$Admins->{$CONTENTS{sciper}}}) {
				print qq{
				<h2>Sous votre contrôle</h2>
				Vous pouvez gérer les droits d'accès (<b>gestion</b>, <b>consultation</b>, <b>réservation</b>) et la <b>notification</b> (confirmation par mail des opérations sur cette ressource) pour les ressources ci-dessous qui sont sous votre contrôle.<br>
				Note : vous ne pouvez pas enlever vos propres droits d'accès, contacter un administrateur pour ce faire.
				<p></p>
				<form action="ges_user?objID=$objID" method="post">
				<input type="hidden" name="scipertodo" value="$scipertodo">
				<table width="80%" border="1">
				<th class="header_cell">ressource
				<th class="header_cell">gestion (tous les droits)
				<th class="header_cell">consultation
				<th class="header_cell">réservation
				<th class="header_cell">notification
				};

				foreach my $objID (sort {$userObjects->{$a}->{objdata}->{nom} cmp $userObjects->{$b}->{objdata}->{nom}} keys %$userObjects) {
					next unless $objID;
					next unless $Admins->{$CONTENTS{sciper}}->{$objID};
					
					my $admin_chk = $allObjects->{$objID}->{usrdata}->{$scipertodo}->{droit}	eq 'A' ? 'checked' : '';
					my $read_chk  = $allObjects->{$objID}->{usrdata}->{$scipertodo}->{droit}	eq 'R' ? 'checked' : '';
					my $res_chk   = $allObjects->{$objID}->{objdata}->{$scipertodo}->{droit}	eq 'W' ? 'checked' : '';

					my $mail_chk  = $allObjects->{$objID}->{usrdata}->{$scipertodo}->{mail}  ? 'checked' : '';
					my $disabled  = $scipertodo eq $CONTENTS{sciper} 	 ? 'disabled' : '';

					print qq{
					<tr  id="$tr_style">
					<td>$userObjects->{$objID}->{objdata}->{nom}
					<td><input type="radio" name="droit_$objID" value="A" $disabled $admin_chk> 
					<td><input type="radio" name="droit_$objID" value="R" $disabled $read_chk>
					<td><input type="radio" name="droit_$objID" value="W" $disabled $res_chk> 
					<td><input type="checkbox" name="mail_$objID"  value="1" $mail_chk> 
					<input type="hidden" name="objects" value="$objID">
					};
					
					$tr_style = $tr_style eq 'tr_alt' ? '' : 'tr_alt' ;
					
					if ($disabled) {
					  print qq{
						<input type="hidden" name="droit_$objID" value="$userObj->{$objID}->{objdata}	"> 
					  };
					}
				}
				
				print qq{
				</table>
				<p></p>
				<input type="submit" name="add" value="enregistrer">
				</form> 
				};
			}
			
			unless (isAuth()) {
				print qq{
				<p>Si vous avez des droits d'administration, <a href=$thescript?login=1><b>effectuer la connexion</b></a> pour gérer les accès</p>
				};
			}

		} else {
			print qq{<h3>gestion des utilisateurs</h3>
			Sélectionner une personne
			<p></p>
			};
			foreach my $sciper (sort {lc($dinfo->{$a}->{nom}) cmp lc($dinfo->{$b}->{nom})} @users) {
				print qq{<li><a href="$URLres/search?op=usr&nom_usr=$sciper">$dinfo->{$sciper}->{nom}&nbsp;$dinfo->{$sciper}->{prenom} [$sciper]</a>};
			}
			print qq{</ul>};
			&footpage();
		}
	}
	
	footpage ();
	
}

#__________________
sub disp_obj {
	my (%objects) = @_;

   print  "<h2>Consultation et gestion des objets en réservation</h2>\n";
   
   if (scalar %{$Admins->{$CONTENTS{sciper}}}) {
   		print qq{
   		<li><a href=$thescript/maj_obj>nouvel objet de réservation</a>
   		};
   }
   print qq{
   <form name="form" action="$thescript/search?op=obj" method=post>
   <li>chercher une salle/objet : 
   <input name="nom_obj">
   <input type="submit" name="search_obj" value="chercher">
   </li>
   </form>

   <h2>Salles/objets</h2>
	<b>Actions</b> :
	<li><img src="/images/add.gif" width="14"> &nbsp;| <img src="/images/del.gif" width="14"> &nbsp;= demander l'accès ou l'annulation du droit de réservation pour cette ressource auprès des administrateurs<br>   
	<li><img src="/images/email-ok.gif" width="14"> | <img src="/images/email-ko.gif" width="14"> &nbsp;= état de la notification par mail des réservations pour cette ressource : activée | désactivée (cliquer sur l'icône pour changer).
	<br>
	<b>Droits</b>: <img src="/images/see.png" > consultation ; <img src="/images/ok.gif" width="15"">  réservation ; <img src="/images/keys.gif" width="15">  gestion
	<br><br>
   };

	return unless scalar %objects;
	
	print qq{
		<table width="100%" border="1" cellpadding="2" cellspacing="0">
		<th class=header_cell>Action
		<th class=header_cell style="min-width:70px;">Droits
		<th class=header_cell style="min-width:70px;">Nom
		<th class=header_cell style="min-width:200px;max-width:300px;">Description
		<th class=header_cell>Ressource cachée
		<th class=header_cell>Visibilité des réservations
		<th class=header_cell>Accès
		<th class=header_cell>Plan
		<th class=header_cell>Administrateurs
	};
	foreach $objID (sort {lc($objects{$a}->{nom}) cmp lc($objects{$b}->{nom})} keys %objects) {
		next unless $objID;
		my $obj    = $objects{$objID};
		my $showAction = 1;
		
		my $doLogin = qq{&login=1} unless $showAction;
		my $doLogin = qq{&login=1};
		#	- visible
		$CONTENTS{ACC_TYPE} = 'R';
		my $droits = objAccessAllowed ($objID) ? qq{<img src="/images/see.png">} : qq{<img src="/images/no-see.png">} ;
		#	- res
		$CONTENTS{ACC_TYPE} = 'W';
		$droits .= qq{ <img src="/images/ok.gif" width="15"> } if objAccessAllowed ($objID);
		#	- admin
		$droits .= qq{ <img src="/images/keys.gif" width="15"> }  if $Admins->{$CONTENTS{sciper}}->{$objID};
		my @admins = getObjAdminsTxt ($obj->{id});
		my $admins = join "<br>", @admins;
		my $style;

		my $access = 'disponible'	 																			if $obj->{disp} eq 'd';
		   $access = '<span style="color:orange;">restreint</span>' 	  if $obj->{disp} eq 'r';
		   $access = '<span style="color:red;">indisponible</span>' 	  if $obj->{disp} eq 'i';
		my $visible= $obj->{visible} eq 'r' ? '<span style="color:red;">restreinte</span>' : 'ouverte' ;
		   $datedeb = $obj->{datedeb};
		   $datefin = $obj->{datefin};
		   $datedeb =~ s/\-//g;
		   $datefin =~ s/\-//g;
		   $access .= '<br><span style="color:red;">indisponible du '.rev_date($datedeb)." au ".rev_date($datefin).'</span>' if $datedeb and $datedeb  ne '00000000' && $datefin ge $crt_date;
		$style = qq{style="background-color:#FCE3E3;"} if $obj->{disp} eq 'i';
		$style = qq{style="background-color:#orange;"} if $obj->{disp} eq 'r';
		my $mail = '';
		$mail = $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}}->{mail} ? 'email-ok.gif' : 'email-ko.gif';
		
		my $planLink = qq{<a href="$URLplan?q=$obj->{plan}"><img src="/images/plan.gif" border="0" width="14"></a>} if $obj->{plan};
		
		my $mailLink = qq{<a href=$thescript/flag_mail?objID=$objID><img src=/images/$mail border="0" width="14"></a>} if $userObjects->{$objID};
		
		my $actionLink;
		if (exists $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}} and $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}}->{reg}) {	# - registered
			$actionLink = qq{<a href=# OnClick="if (confirm ('Envoyer la demande d annulation de l accès à $obj->{nom} ?')) {location.href='$thescript/register?objID=$objID&op=unreg'}"><img src="/images/del.gif" border="0" width="14"></a>} unless $Admins->{$CONTENTS{sciper}}->{$objID};
		} else {
			# - test dynamic access
			my $unites = ','.$obj->{unites}.',';
			if (map {$unites =~ m/,$_\b/} @allunits) {
				$actionLink = qq{<a href=# OnClick="if (confirm ('Envoyer la demande d annulation de l accès à $obj->{nom} ?')) {location.href='$thescript/register?objID=$objID&op=unreg'}"><img src="/images/del.gif" border="0" width="14"></a>} unless $Admins->{$CONTENTS{sciper}}->{$objID};
			} else {
				$actionLink = qq{<a href=# OnClick="if (confirm ('Envoyer la demande d accès à $obj->{nom} ?')) {location.href='$thescript/register?objID=$objID&op=reg'}"><img src="/images/add.gif" border="0" width="14"></a>};
			}
			
		}

		my $detLink = $Admins->{$CONTENTS{sciper}}->{$objID} ? qq{<a href="$thescript/cons_obj?objID=$obj->{id}"><b>$obj->{nom}</b></a>} : "$obj->{nom}";

		$detLink = qq{<a href="$thescript/cons_obj?objID=$obj->{id}"><b>$obj->{nom}</b></a>} if $superusers =~ /$CONTENTS{sciper}/;

# ---
		my $detLink = qq{<a href="$thescript/cons_obj?objID=$obj->{id}$doLogin"><b>$obj->{nom}</b></a>};
# ---
		unless ($admins) {
			$admins = qq{sans administrateurs};
			$style  = qq{style="background-color:red;color:yellow;"} ;
			$actionLink = '';
		}
		
		$access .= qq{, <div id="units_div$objID" style="display:none; width:500px; height: auto; padding: 10px; border: 1px solid #aaaaaa; position:absolute; top:50%; left:50%; -webkit-transform: translate(-50%,-50%);-ms-transform: translate(-50%,-50%);transform:translate: (-50%,-50%);-moz-transform: translate(-50%,-50%); z-index: 9999; background-color: white; text-align: left; "><b>$obj->{nom}</b> - accès implicite pour les accréditations dans : <a href="#" style="float:right;"onclick="document.getElementById('units_div$objID').style.display='none';">fermer</a>
		<br><br> $obj->{unites}</div>
		<a href="#" onclick="document.getElementById('units_div$objID').style.display='block';">accès implicite...</a>} if $obj->{unites};
		$access =~ s/,/, /g;
		$actionLink = '' unless $showAction;
		my $hide = qq{<span style="color:red;">cachée</span>} if $obj->{hide};

		print qq{
			<tr $style>
			  <td align="center" valign=top class="td_ul">$actionLink &nbsp;$mailLink</td>
			  <td valign=top class="td_ul">$droits</td>
			  <td valign=top class="td_ul">$detLink</td>
			  <td valign=top class="td_ul" style="max-width:300px;">$obj->{descr}</td>
			  <td valign=top class="td_ul">$hide</td>
			  <td valign=top class="td_ul">$visible</td>
			  <td valign=top class="td_ul">$access</td>
			  <td valign=top class="td_ul">$planLink</td>
			  <td valign=top class="td_ul">$admins</td>
			</tr>
		};
	}
	print qq{
	</table>
    };

}


#__________________
sub register {
	
	erreur ("objet ou ressource pas précisé") unless $CONTENTS{objID};
	erreur ("opération pas précisée") 		 unless $CONTENTS{op};

	my $objID  = $CONTENTS{objID};
	my $obj    = $allObjects->{$objID}->{objdata};

	my $admins;
	my @scipers = getObjAdmins($objID);
	return unless scalar @scipers;

	foreach my $sciper (sort {lc($dinfo->{$a}->{nom}) cmp lc($dinfo->{$b}->{nom})} @scipers) {
		$admins .= qq{$dinfo->{$sciper}->{email},};
	}
	$admins =~ s/,$//;
	erreur ("ressource sans administrateurs, veuillez avertir le support") unless $admins;
	erreur ("opération inconnue") unless $CONTENTS{op} eq 'reg' or $CONTENTS{op} eq 'unreg';
	
	my ($msg, $subj);
	if ($CONTENTS{op} eq 'reg') {
		erreur ("vous êtes déjà utilisateur de cette ressource") if exists ($allObects{$objID}->{usrdata}->{$CONTENTS{sciper}});
		$subj = qq{Réservations : demande d'accès à la ressource : $obj->{nom}};
		$msg = qq{
	Bonjour,
	
Demande d'accès pour la réservation de la ressource : $obj->{nom} ($obj->{descr})
Pour   : $dinfo->{$CONTENTS{sciper}}->{nom} $dinfo->{$CONTENTS{sciper}}->{prenom}
Sciper : $CONTENTS{sciper}
Mail   : $dinfo->{$CONTENTS{sciper}}->{email}

Procédure d'inscription :
- aller sur la page : $URLres/search?op=usr&nom_usr=$CONTENTS{sciper}&login=1
- cocher les cases pour activer les droits d'accès pour réservations, 
gestion et/ou confirmation des opérations par mail pour la ressource
	$userObjects->{$objID}->{objdata}->{nom}
qui est sous votre contrôle

Votre service de réservation des ressources
		};
	}
	if ($CONTENTS{op} eq 'unreg') {
		erreur ("vous n'êtes pas utilisateur de cette ressource") unless exists ($allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}});

		$subj = qq{Réservations : demande de résiliation de l'accès à la ressource : $obj->{nom}};
		$msg = qq{
	Bonjour,
	
Demande de résiliation de l'accès pour la réservation de la ressource : $obj->{nom} ($obj->{descr})
Pour   : $dinfo->{$CONTENTS{sciper}}->{nom} $dinfo->{$CONTENTS{sciper}}->{prenom}
Sciper : $CONTENTS{sciper}
Mail   : $dinfo->{$CONTENTS{sciper}}->{email}

Procédure d'annulation :
- aller sur la page : $URLres/search?op=usr&nom_usr=$CONTENTS{sciper}
- décocher la case pour desactiver le droit d'accès pour réservations pour la ressource 
	$userObjects->{$objID}->{objdata}->{nom}
qui est sous votre contrôle

Votre service de réservation des ressources
		};

	}

	sendMail ($admins, $subj, $msg) ;

	print qq{
	<h2>gestion des réservations</h2>
	La demande ci-dessous a été envoyée aux administrateurs de la ressource $userObjects->{$objID}->{objdata}->{nom}
<p>
To : $admins<br>
Subj : $subj<br>
$msg<br>
</p>
	};
	footpage;
	
}

#____________
sub isAuth {
	
 if ($tequila) {
	 return 1 if $tequila->{attrs}{uniqueid};
 }

 foreach my $cookie (split(/;/, $ENV {HTTP_COOKIE})) {
	 return 1 if $cookie =~ /Tequila_res=/;
 }	

 return 0;

}

#__________________
sub cons_obj {
	my ($objID) = @_;
	$objID = $CONTENTS{objID} unless $objID;
	return unless $objID;
	
	my $obj = $allObjects->{$objID}->{objdata};
	erreur("ressource pas trouvée") unless $obj;

#warn "-> cons_obj\n".Dumper($obj);

	if ($obj->{visible} eq 'r') {	# - accès restreint
		auth() unless $tequila;
	}

	erreur ("L'accès aux réservations pour cette ressource est limité aux ayant-droits<br>Veuillez contacter un des administrateurs pour plus d'informations") unless  objAccessAllowed ($objID);

	my @objUsers 	= getObjUsers ($objID);
	my @admins 		= getObjAdmins($objID);

	if ($CONTENTS{op} eq 'notify') { # - 
		erreur ("Pas de droits") unless ($Admins->{$CONTENTS{sciper}}->{$objID}  or $superusers =~ /\b$CONTENTS{sciper}\b/);
		print qq{
			<div style="background: #eeeeee;">
			<h3>Notification aux utilisateurs de cette ressource</h3>
		};
		erreur("Pas de sujet") 	 unless $CONTENTS{subj};
		erreur("Pas de contenu") unless $CONTENTS{msg};
		my $dest;
		foreach my $sciper (sort {lc($dinfo->{$a}->{nom}) cmp lc($dinfo->{$b}->{nom})} @objUsers) {
			next unless exists $allObjects->{$objID}->{usrdata}->{$sciper};
			next unless exists $dinfo->{$sciper}->{nom};
			next unless exists $dinfo->{$sciper}->{email};
			$dest .= qq{$dinfo->{$sciper}->{email},};
		}	

		#	- implicit access
		foreach my $unite (split /,/, lc($obj->{unites}) ) {
			nest unless $unite;
			$dest .= qq{personnel.$unite\@epfl.ch,}
		}
		foreach my $groupe (split /,/, lc($obj->{groupes}) ) {
			nest unless $groupe;
			$dest .= qq{$groupe\@groupes.epfl.ch,}
		}
		$dest =~ s/,$//;
		erreur("Aucun destinataire") unless $dest;
	
#	  sendMail ($dest, $CONTENTS{subj}, $CONTENTS{msg}) ;
		my $dest_txt;
		map { 
			$dest_txt .= qq{<li>$_</li>} if $_
		} split /,/, $dest;

		print qq{
			<hr>
			<h4>Message</h4>
			$CONTENTS{msg}
			<hr>
			<h4>Envoyé à</h4>
			$dest_txt
			<br>
			<hr>
			<a href=$URLres/cons_obj?objID=$objID>retour sur la page de la ressource</a>
		};
		footpage ();

	}


	if ($CONTENTS{op} eq 'adduser') { # - adduser
		erreur ("Pas de droits") unless ($Admins->{$CONTENTS{sciper}}->{$objID}  or $superusers =~ /\b$CONTENTS{sciper}\b/);
		erreur ("sciper vide")   unless $CONTENTS{sciperTodo};

		if ($CONTENTS{add}) {
			# search by name
			my @users = searchUser ($CONTENTS{sciperTodo});

			erreur ("nom pas trouvé") unless scalar @users;
			
			if ($#users == 0) {
				$CONTENTS{sciperTodo} = pop @users;
			} else {
				print qq{
					<h3>Nom : $obj->{nom}</h3>
					<b>Description : </b>$obj->{descr}<br>
					<br>Ajouter un utilisateur, sélection :<ul>
				};
				foreach my $sciper (sort {lc($dinfo->{$a}->{nom}.$dinfo->{$a}->{prenom}) cmp lc($dinfo->{$b}->{nom}.$dinfo->{$a}->{prenom})} @users) {
					print qq{<li><a href="$URLres/cons_obj?objID=$objID&op=adduser&sciperTodo=$sciper&admin=$CONTENTS{admin}&mail=$CONTENTS{mail}&add=1&admin=$CONTENTS{admin}&mail=$CONTENTS{mail}">$dinfo->{$sciper}->{nom}&nbsp;$dinfo->{$sciper}->{prenom} [ $sciper ]</a>};
				}
				print qq{</ul>};
				&footpage();
			}
			
			
		} else {
			erreur ("sciper erroné");
		}

		my @sciper_todo = ($CONTENTS{sciperTodo});
		erreur ("sciper pas trouvé") unless $dinfo->{$CONTENTS{sciperTodo}}->{nom};
		erreur ("utilisateur déjà enregistré pour cette ressource") if (exists $allObjects->{$objID}->{usrdata}->{$CONTENTS{sciperTodo}});
		
		push @scipers, $CONTENTS{sciperTodo};

		$Admins->{$CONTENTS{sciperTodo}}->{$objID} = 1 if $CONTENTS{droit} eq 'A';
		
		addUser ({ 
			sciper => $CONTENTS{sciperTodo}, 
			droit  => $CONTENTS{droit}, 
			obj_id => $objID,
			mail   => $CONTENTS{mail},
			});
		print qq{
			Nouveau droit de réservation explicite pour : $dinfo->{$CONTENTS{sciperTodo}}->{nom} ($CONTENTS{sciperTodo})<br>
			<a href=$URLres/cons_obj?objID=$objID>retour sur la page de la ressource</a>
		};
		footpage ();
	}

	if ($CONTENTS{op} eq 'majusers') { # - 
		erreur ("Pas de droits") unless ($Admins->{$CONTENTS{sciper}}->{$objID}  or $superusers =~ /\b$CONTENTS{sciper}\b/);
		print qq{<h3>Ressource : $obj->{nom}</h3>};
		my $droits;
		map {
			$droits->{$_} = 'R'
		} split (/ /, $CONTENTS{read});
		map {
			$droits->{$_} = 'W'
		} split (/ /, $CONTENTS{res});
		map {
			$droits->{$_} = 'A'
		} split (/ /, $CONTENTS{admin});
		my %scipers= map {$_, 1} split (/ /, $CONTENTS{scipers});
		my %mails	 = map {$_, 1} split (/ /, $CONTENTS{mail});

warn ">> $objID users ".Dumper($droits);		
		my ($del, @todo);
		if ($CONTENTS{del}) {	# - efface tous les droits explicites
			$del  = join ',', keys %scipers;
		} else {
			$del  = join ',', map { $droits->{$_} ? () : $_ } keys %scipers;
			@todo = map { $droits->{$_} ? $_ : () } keys %scipers;
		}

		if ($del) {
			my $sql = qq{delete from users where obj_id=? and sciper in ($del)};
	 		dbquery($sql, $objID);

			my $dels = join ('<br>', map { "$dinfo->{$_}->{nom} $dinfo->{$_}->{prenom} ($_)" if exists $dinfo->{$_}->{nom}} split (/,/, $del));
			print qq{<p><b>Droits explicites effacés</b> :</p>$dels};
		}
		
		if (@todo) {
			print qq{<hr><p><b>Mise à jour des droits explicites</b> :</p>};
			foreach my $sciper (@todo) {
				my $sql = qq{update users set droit=?, mail=? where obj_id=? and sciper=?};		
		 		dbquery($sql, $droits->{$sciper}, $mails{$sciper}, $objID, $sciper);
				print qq{<br>$dinfo->{$sciper}->{nom} $dinfo->{$sciper}->{prenom} ($sciper) : accès explicite ($droits->{$sciper})};
				print qq{, admin} if $usres->{$sciper};
				print qq{, mail}  if $mails{$sciper};
			}
		}		
		
		print qq{
			<hr>
			Mise à jour des droits explicites effectuée<br>
			<a href=$URLres/cons_obj?objID=$objID>retour sur la page de la ressource</a>
		};
		footpage ();

	}

	my $access  = 'disponible' 		if $obj->{disp} eq 'd';
	   $access  = 'restreint'  		if $obj->{disp} eq 'r';
	   $access  = 'indisponible'  if $obj->{disp} eq 'i';
	my $unites  = $obj->{unites};
	my $groupes = $obj->{groupes};
	my $visible = $obj->{visible} eq 'r' ? "restreinte (ayants-droit)" : "ouverte";
	   $datedeb = $obj->{datedeb};
	   $datefin = $obj->{datefin};
	   $datedeb =~ s/\-//g;
	   $datefin =~ s/\-//g;
	   $access .= '<br><span style="color:red;">Indisponible du '.rev_date($datedeb)." au ".rev_date($datefin).'</span>' if  $datefin and $datefin  ne '00000000' && $datefin ge $crt_date;
	   $style   = qq{style="background-color:#FCE3E3;"} if $access =~ /indisponible/;
	   $style   = qq{style="background-color:#orange;"} if $access =~ /restreint/;

	print qq{
	<h3>Ressource/salle</h3>
	<div style="margin-left: 20px;">
	<b>Nom :</b> $obj->{nom}<br>
	<b>Description : </b>$obj->{descr}<br>
	};
	print qq{<b>Nb de ressources disponibles</b> : $obj->{pool}<br>} 				if ($obj->{pool} > 1);
	print qq{<b>Nb max d'objets par réservation</b> : $obj->{max_pool}<br>} if ($obj->{pool} > 1);
	print qq{<b>Plan :</b> <a href="$URLplan?q=$obj->{plan}"><img src="/images/plan.gif" border="0">$obj->{plan}</a><br>} if $obj->{plan};
	my $implicitTxt  = qq{<li>Unités: $unites</li>} 	 if $unites;
		 $implicitTxt .= qq{<li>Groupes: $groupes</li>} if $groupes;
		 $implicitTxt  = qq{aucun - seuls les comptes explicites ci-dessous ont accès} unless $implicitTxt;
	print qq{
		<b>Droits d'accès implicites : </b>$implicitTxt<br>
	};
	print qq{<span style="color:red; font-weight: bold;">Ressource visible seulement pour les personnes enregistrées explicitement</span><br>} if $obj->{hide};
	print qq{
		<b>Visibilité des réservations : </b>$visible<br>
		<b>Accès pour réservations :</b> $access
	
		<p></p>
	};
	my @admins = getObjAdminsTxt ($objID);
	my $admins = join ", ", @admins;

	print qq{<b>Administrateurs : </b>
		<div style="margin-left: 20px;"> $admins</div>
		<div class="clear both"></div>
	};

	if ($allObjects->{$objID}->{objdata}->{datedeb} and $allObjects->{$objID}->{objdata}->{datedeb}  ne '0000-00-00'  && $datefin ge $crt_date) {
		print qq{<br><span style="color:red;">La ressource est inaccessible du }.rev_date($allObjects->{$objID}->{objdata}->{datedeb}).' au '.rev_date($allObjects->{$objID}->{objdata}->{datefin}).qq{</span>};
	}
	print qq{
	</div>
	};
	
	if ($Admins->{$CONTENTS{sciper}}->{$objID}  or $superusers =~ /\b$CONTENTS{sciper}\b/) {
		print qq{<p></p>
			<input type="button" value="modifier la ressource" OnClick="javascript:location.href='$URLres/maj_obj?objID=$objID'">
			<input type="button" value="effacer la ressource" OnClick="if (confirm('Effacer cette ressource et toutes les réservations ?')) { javascript:location.href='$URLres/maj_obj?objID=$objID&op=del'}">
			<hr>
			<b>Autorisations d'accès par webservice</b> [ <a href="#" onclick="
						if (confirm ('Annuler toutes les autorisations pour cette ressource ?')) {
							location.href='$URLres/maj_token?objID=$objID&op=del_all'; 
						}">Annuler toutes les autorisations</a> ]
			<div style="margin-left: 20px;">
				<div style="display: flex; font-weight: bold; ">
		};
		print qq{
					<div style="width: 90px;">Host IP </div>
		} if $IP_BASED_AUTH;
		#	- tokens web service
		print qq{
					<div style="width: 640px; margin-left: 10px;">Token</div>
					<div style="width: 90px;margin-left: 10px;">Accès </div>
					<div style="width: 90px;margin-left: 10px;">Action</div>
				</div>
		};
		my $objTokens = get_obj_tokens ($objID);
		foreach my $token_id (keys %$objTokens) {
			my $token = $objTokens->{$token_id};
			print qq{
				<div style="display: flex;">
			};
			print qq{
					<div style="width: 90px;">$token->{host}</div>
			} if $IP_BASED_AUTH;
			print qq{
					<div style="width: 640px; margin-left: 10px;">$token->{id}</div>
					<div style="width: 90px; margin-left: 10px;">$token->{rights}</div>
					<div style="width: 90px; margin-left: 10px;"><a href="#" onclick="
						if (confirm ('Annuler l accès depuis cette adresse ?')) {
							location.href='$URLres/maj_token?objID=$objID&op=del&tokenID=$token_id'; 
						}">Annuler</a></div>
				</div>
			};
		}
		print qq{
			<br>
			<form name="form" action="$URLres/maj_token">
			<input type="hidden" name="objID" value="$objID">
			<input type="hidden" name="op" value="add">
			<div style="display: flex;">
			 <div >	<b>Nouvelle autorisation</b></div>
			 <div style="margin-left: 10px;">Accès : <select name="rights">
					<option value="RO" selected>RO</option>
					<option value="RW">RW</option>
					</select>
			 </div>
			 <div  style="margin-left: 10px;"><input type="submit" name="add" value="Ajouter"></div>
			</div>
			</form>
		};
		
		#	- callback
			if ($USE_CALLBACK) {
			my $call_back = getCallBack($objID);
			my $cb_active = $call_back->{active} ? 'checked' : '';
			my $cb_json	  = $call_back->{format} eq 'json' ? 'checked' : '';
			my $cb_text	  = $call_back->{format} eq 'text' ? 'checked' : '';
			print qq{
			<hr>
			<b>Call-back réservations</b> (appel externe après la mise à jour d'une réservation)<br>
			<form name="form" action="$URLres/majCallBack">
				<input type="hidden" name="objID" value="$objID">
				<input type="hidden" name="id" value="$call_back->{id}">
				<table style="width: 100%; margin-left: 20px;">
					<tr>
					 <td width="150"><b>Actif</b>
					 <td><input type="checkbox" name="active" value="1" $cb_active>
					<tr>
					 <td><b>Description</b>
					 <td><textarea name="descr" id="descr" style="width: 400px;">$call_back->{descr}</textarea>
					<tr>
					 <td><b>URL</b>
					 <td><input name="url" type="url" id="url"  style="width: 400px;" value="$call_back->{url}">
					<tr>
					 <td><b>Token</b>
					 <td><input name="token" id="token"  style="width: 400px;" value="$call_back->{token}">
					<tr>
					 <td><b>Format</b>
					 <td>
						<input type="radio" name="format" value="json" $cb_json> JSON
						<input type="radio" name="format" value="text" $cb_text> TEXT
				</table>
				<div  style="margin: 20px 0 10px 0; display: inline;"><input type="submit" name="save" value="Enregistrer"></div>
				<div  style="margin: 20px 0 10px 0; display: inline;"><input type="submit" name="del" value="Supprimer" onclick="
					if (confirm('Supprimer ce callback ?')) {
						return true;
					} else {
						return false;
					}
				"></div>
			</form>		
			};
		}
	}
		
	print qq{
	</div>
	<hr>
	<form action=${thescript}/graph name=form method=POST>
	<input name="objID" type="hidden" value="$objID">
	<b>Graphique des réservations</b>, date 
	<input name="date1" id="date1" size="10" value="}.(sprintf "%02d/%02d/%4d",$mday,$mon,$year).qq{">
	<a href="#" 
		onClick="cal.select(document.getElementById('date1'),'anchor1','dd/MM/yyyy'); return false;" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
	</a>
	graphique
	 <select name=graph_type>
	   <option value=M selected>du mois</option>
	   <option value=W >de la semaine</option>
	 </select>
	 <input type=submit value='afficher'>
	</form>
	<hr width="50%" align="left">
	};

	if ($obj->{pool} > 1) {
	   print qq{
	   <form action=${thescript}/pool_dispo name=form method=POST>
	   <input name="objID" type="hidden" value="$objID">
		Vérifier la <b>disponibilité</b> des objets du pool de cette ressource
		du <input name="date1" id="date1" size="10" value="}.(sprintf "%02d/%02d/%4d",$mday,$mon,$year).qq{">
			<a href="#" onClick="
				cal.select(document.getElementById('date1'),'anchor1','dd/MM/yyyy'); 
				return false;
				" name="anchor1" id="anchor1"><img src="/images/cal.gif" border="0">
			</a>
		au <input name="date2" id="date2" size="10" value="}.(sprintf "%02d/%02d/%4d",$mday,$mon,$year).qq{">
			<a href="#" onClick="
				cal.select(document.getElementById('date2'),'anchor2','dd/MM/yyyy'); 
				return false;
				" name="anchor2" id="anchor1"><img src="/images/cal.gif" border="0">
			</a>
		<input type=submit value='afficher'>
		</form>
		<hr width="50%" align="left">
		};
	}

	if ($Admins->{$CONTENTS{sciper}}->{$objID}  or $superusers =~ /\b$CONTENTS{sciper}\b/) {

		print qq{
			<div style="background: #eeeeee;">
			<h3>Gestion des utilisateurs pour cette ressource</h3>
			<form action="$URLres/cons_obj?objID=$objID&op=adduser" method="post">
			<ul id=indented>
			<li><b>Nouvel utilisateur en accès explicite : </b><br>
				sciper ou nom : <input name="sciperTodo" width="">
				<br>
				droits d'accès : 
				<input type="radio" name="droit" value="A"> administrateur, 
				<input type="radio" name="droit" value="R"> consultation, 
				<input type="radio" name="droit" value="W"> réservations
				<br>
				notifications : 
				<input type="checkbox" name="mail"  value="1"> confirmation par mail des réservations
				<br>
				<input type="submit"   name="add"   value="ajouter">
			</li>
			</ul>
			</form>
			<hr width="50%" align="left">
			<h3>Notifier les utilisateurs de cette ressource</h3>
			<form name="form" action="$URLres/cons_obj?objID=$objID&op=notify" method="post"  style="margin-left: 50px;">
			Le message ci-dessous sera transmis aux utilisateurs de la ressource qui ont une adresse mail \@epfl.ch.<br>
			Pour ce qui est des listes de mails des unités ou des groupes, la notification peut être soumise à modération.<br>
			<b>Sujet</b><br>
			<input type="text" name="subj" style="width: 80%;"> <br>
			<b>Message</b><br>
			<textarea name="msg" style="width: 80%; "></textarea><br>
			<input type="submit" name="notify" value="envoyer">
			</form>
			<hr width="50%" align="left">
			<h3>Droits explicites pour cette ressource</h3>
			<form name="form" action="$URLres/cons_obj?objID=$objID&op=majusers" method="post"  style="margin-left: 50px;">
			<table style="border: 0; width: 75%;">
			<th class="header_cell">admin
			<th class="header_cell">consultation
			<th class="header_cell">réservation
			<th class="header_cell">notifications
			<th class="header_cell">user
		};

		foreach my $sciper (sort {lc($dinfo->{$a}->{nom}) cmp lc($dinfo->{$b}->{nom})} @objUsers) {
			next unless exists $allObjects->{$objID}->{usrdata}->{$sciper};
			next unless exists $dinfo->{$sciper}->{nom};
#warn ">> cons_obj : $sciper, $allObjects->{$objID}->{usrdata}->{$sciper}->{droit}\n";
			my $admin_chk = "checked" if $Admins->{$sciper}->{$objID};
			my $read_chk	= "checked" if $allObjects->{$objID}->{usrdata}->{$sciper}->{droit} eq 'R';
			my $res_chk 	= "checked" if $allObjects->{$objID}->{usrdata}->{$sciper}->{droit} eq 'W';
			my $mail			= "checked" if $allObjects->{$objID}->{usrdata}->{$sciper}->{mail};
			print qq{
				<tr id="$tr_style"  $style>
				<td width="50"><input type="checkbox" name="admin" value="$sciper" $admin_chk>
				<td width="50"><input type="checkbox" name="read"  value="$sciper" $read_chk>
				<td width="50"><input type="checkbox" name="res"   value="$sciper" $res_chk>
				<td width="50"><input type="checkbox" name="mail"  value="$sciper" $mail>
				<td>$dinfo->{$sciper}->{nom}&nbsp;$dinfo->{$sciper}->{prenom}</a>
						<input type="hidden" name="scipers" value="$sciper">
				</tr>
			};
			$tr_style = $tr_style eq 'tr_alt' ? '' : 'tr_alt' ;
		}
		print qq{
			</table>
			<br><b>Actions :</b>
			<br>
			Mise à jour pour la sélection - <input name="maj" type="submit" value="enregistrer">
			<p>Effacer tous les droits explicites non-admin et sans notification mail : <input name="del" type="submit" value="effacer" id="del" OnClick="return confirm('Effacer les accès explicites ?');">
		</form>
		</div>
		};

	}
	
	footpage ;

}

#__________________
sub searchUser {
  my ($cle) = @_;
  return unless $cle;
  
  my @users;

  my $sql = qq{select distinct
		dinfo.sciper.sciper, dinfo.sciper.nom_acc, dinfo.sciper.prenom_acc, dinfo.sciper.nom_usuel, dinfo.sciper.prenom_usuel
		from dinfo.sciper left outer join dinfo.accred on dinfo.sciper.sciper=dinfo.accred.sciper 
  };
  if ($cle =~ /^[1-9]\d{5}$/) {
  	$sql .= qq{ where dinfo.sciper.sciper=$cle};
  } else {
  	$cle =~ s/'/''/g;
  	$sql .= qq{ where dinfo.sciper.nom_acc like '$cle%'};
  }

  my $sth = $db_dinfo->query($sql);
  while (my $data = $sth->fetchrow_hashref) {
	next unless $data->{sciper};

	my $nom    = $data->{nom_usuel}    ? $data->{nom_usuel}    : $data->{nom_acc} ;
	my $prenom = $data->{prenom_usuel} ? $data->{prenom_usuel} : $data->{prenom_acc} ;

	$dinfo->{$data->{sciper}}	= {
		nom			=> $nom,
		prenom 		=> $prenom,
	};
	
	push @users, $data->{sciper}
  }
  
  return @users;
}

#__________________
sub flag_mail {

	my $objID = $CONTENTS{objID};
	return unless $objID;

	my $flag = !$allObjects->{$objID}->{usrdata}->{$CONTENTS{sciper}}->{mail};
	
	# - users exists ?
	my $sql = qq{select sciper from users where obj_id=? and sciper=?};
	my $sth = dbquery($sql, $objID, $CONTENTS{sciper});

	if (my $user = $sth->fetchrow_hashref) { 	# - user exists
		my $sql = qq{update users set mail=? where obj_id=? and sciper=?};
		dbquery($sql, $flag, $objID, $CONTENTS{sciper});
	} else {
		my $sql = qq{insert into users set 
			mail=?,
			obj_id=?,
			sciper=?
		};
		dbquery($sql, $flag, $objID, $CONTENTS{sciper});
	}
	
	print "Location: ${URLres}/gestion?op=obj\n\n";
	exit;
	
}

#__________________
sub ges_obj {	

   my %objects = map {$_, $userObjects->{$_}->{objdata}} keys %$userObjects;
   disp_obj (%objects);
  
   &footpage;
}

#--------
sub sendMail {
  my ($dest, $subj, $msg) = @_;

  my %mail;
  $mail{From} 	 = $generic_mail; 

warn "sendMail [DEBUG=$DEBUG] :: To : $dest\n";
return if $DEBUG;

  $mail{To}   	 = $dest;
  $mail{Smtp} 	 = 'mail.epfl.ch';
  $mail{Subject} = $subj;
  $mail{Message} = $msg;	
  $mail{'Content-Transfer-Encoding'} = '8bit';	
  if (sendmail (%mail)) {
     if ($Mail::Sendmail::error) {
		warn "sendMail  :: ** ERR 1 [$Mail::Sendmail::error]";
     } else {
	   $msg =~ s/\n/;/g;
     }
  } else {
	warn "sendMail  :: ** ERR 2 [$Mail::Sendmail::error]";
  }

}

#--------
sub listcontacts {

	my $admin_list;
	print qq{
	<h2>Gestion des réservations </h2>
	<h3>contacts</h3>
	<b>les administrateurs des ressources</b> à votre disposition
		<ul id="indented">
	};
	
    my $count = 0;
	foreach my $objID (sort {$allObjects->{$a}->{objdata}->{nom} cmp $allObjects->{$b}->{objdata}->{nom}} keys %$userObjects) {
	  print qq{<p></p><h3>$allObjects->{$objID}->{objdata}->{nom}</h3>};
	  foreach my $sciper (sort {lc($dinfo->{$a}->{nom}) cmp lc($dinfo->{$b}->{nom})} keys %$Admins) {
    	next unless defined $Admins->{$sciper}->{$objID};

    	if ($dinfo->{$sciper}->{email}) {
	    	print qq{<li><a href=mailto:$dinfo->{$sciper}->{email}>$dinfo->{$sciper}->{nom}&nbsp;$dinfo->{$sciper}->{prenom}</a>}
	    } else {
	    	print qq{<li>$dinfo->{$sciper}->{nom}&nbsp;$dinfo->{$sciper}->{prenom}}
	    }
	    $count++;
	  }
	}
	
	print qq{Retrouver la ressource qui vous intéresse et contacter un des administrateurs pour en obtenir
	l'accès} unless $count;

	print qq{</ul>
	<p></p>
	<a href=mailto:$support><b>le support technique</b></a> pour remarques ou pour signaler un problème avec l'interface
	};
	
	&footpage;	
}

#--------#
sub header {

   return if $HEADER_DONE;
   
   print qq{Content-Type: text/html; charset=utf-8\n\n};

   print qq{<!DOCTYPE html>
<html lang="en">
<head>
	<title>Réservations en ligne</title>

	<meta charset="utf-8" />
	<meta name="description" content="" />
	<meta name="msapplication-TileColor" content="#ffffff">

	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="theme-color" content="#e30713">

	<link rel="shortcut icon" type="image/x-icon" href="//web2018.epfl.ch/1.0.2/icons/favicon.ico">
	<link rel="icon" type="image/png" sizes="16x16" href="//web2018.epfl.ch/1.0.2/icons/favicon-16.png">
	<link rel="icon" type="image/png" sizes="32x32" href="//web2018.epfl.ch/1.0.2/icons/favicon-32.png">
	<link rel="apple-touch-icon" sizes="180x180" href="//web2018.epfl.ch/1.0.2/icons/apple-touch-icon.png">

	<link rel="stylesheet" href="//web2018.epfl.ch/1.0.2/css/elements.min.css">

	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-4833294-1"></script>
	<script>
		window.dataLayer = window.dataLayer || [];
		function gtag(){dataLayer.push(arguments);}
		gtag('js', new Date());
		gtag('config', 'UA-4833294-1', { 'anonymize_ip': true });
	</script>

	 <link rel="stylesheet" href="/absresv2.css">
	 <script src="/CalendarPopup.js" type="text/javascript"></script>

    <title>réservations@epfl</title> 
</head> 
<body data-spy="scroll" data-target="#intermediate-nav" data-offset="0">
 
<header role="banner" class="header header-light" style="display: inline;">
	<div class="drawer mr-3 mr-xl-0">
		<button class="drawer-toggle">
			<svg class="icon" aria-hidden="true"><use xlink:href="#icon-chevron-right"></use></svg>
		</button>
		<a href="#" class="drawer-link">
			<span class="text">
				Go to main site
			</span>
		</a>
	</div>

  <div class="header-light-content" style="display: inline-grid;vertical-align: top;width: auto;margin-top: 30px;">
    <a class="logo" href="https://www.epfl.ch/">
      <img src="https://www.epfl.ch/wp-content/themes/wp-theme-2018/assets/svg/epfl-logo.svg?refresh=now" alt="Logo EPFL, École polytechnique fédérale de Lausanne" class="img-fluid">
    </a>
  </div>
  <div style="
    display: inline-grid;
    vertical-align: top;
    margin-top: 40px;
    margin-left: 20px;
">
    <h1>Réservations en ligne</h1>
	</div>

</header>

<div class="main-container">

<div>
 <div class="overlay"></div>
 
 <div class="w-100 pb-5">
 <main id="main" role="main" class="content">
 <div class="container">
	};

   $HEADER_DONE='1';

   print qq{
    <p></p>
    <div class="redbox">*** ATTENTION : vous êtes sur une version de TEST ***</div>
   } if $DEBUG;
   
   print qq{
   	<p></p>
   	<table width="100%" border="0" cellpadding="2" cellspacing="0">
   	 <tr>
   	   <td valign="top">
<!--
   	   <center><img src="/images/res.jpg"></center>
-->
   };
}

#--------------
sub checkDB {
	
# - check admins
  my %allAdmins;
  my $sql = qq{select sciper,obj_id from users where droit = 'A'};
	my $sth = dbquery($sql);
  while (my ($sciper, $objID) = $sth->fetchrow_array) {
  	my $admins = $allAdmins{$objID};
  	push (@$admins, $sciper);
  	$allAdmins{$objID} = $admins;
  }

	return;
	
  my $sql = qq{select * from obj};
	my $sth = dbquery($sql);
  while (my $data = $sth->fetchrow_hashref) {
  	my $admins = $allAdmins{$data->{id}};
  	unless (scalar @$admins) {
#  		$orphans .= qq{$data->{nom} ($data->{id})\n};
  	}
  }
  
#  sendMail ($support, "res :: orphans ressources", $orphans) if $orphans;

}
#------------------
sub getAccreds {
  my ($scipertodo) = @_;
  return unless $scipertodo;
  return unless $scipertodo =~ /^\d\d\d\d\d\d$/;

  my $sql = qq{SELECT dinfo.unites.sigle FROM dinfo.accred left outer join dinfo.unites on unite=id_unite where accred.sciper='$scipertodo'};
  my $sth = $db_dinfo->query($sql);
  my @accreds;
  while (my ($sigle) = $sth->fetchrow) {
  	next unless $sigle;
  	push @accreds, $sigle;
  }

  return @accreds;
}

#------------------
sub load_dinfo {
  my (@users) = @_;
  
  @users = @commonUsers unless @users;

  my $allUnits = join "','", @commonUnits;
  my $scipers  = join "','", @users;
  my $sql = qq{select 
  	dinfo.sciper.sciper, dinfo.sciper.nom_acc, dinfo.sciper.prenom_acc, dinfo.sciper.nom_usuel, dinfo.sciper.prenom_usuel, dinfo.allunits.sigle, dinfo.allunits.id_unite,  dinfo.emails.addrlog, dinfo.accred.ordre   	
  	from dinfo.allunits,dinfo.emails,dinfo.sciper 
  	left outer join dinfo.accred on dinfo.sciper.sciper=dinfo.accred.sciper 
  	where dinfo.accred.unite=dinfo.allunits.id_unite and dinfo.emails.sciper=dinfo.sciper.sciper and (allunits.sigle in ('$allUnits') or dinfo.sciper.sciper in ('$scipers'))  order by dinfo.accred.ordre
  	};

  my $sth = $db_dinfo->query($sql);
  while (my ($sciper, $nom_acc, $prenom_acc, $nom_usuel, $prenom_usuel, $sigle, $id_unite, $addrlog, $ordre) = $sth->fetchrow) {
  	next unless $sciper;
		my $nom    = $nom_usuel    ? $nom_usuel    : $nom_acc ;
		my $prenom = $prenom_usuel ? $prenom_usuel : $prenom_acc ;

		$allUnitsUsers->{$id_unite}->{$sciper} = 1;
		$allUnitsUsersBySigle{$sigle}->{$sciper} = 1;
		$dinfo->{$sciper}	= {
			nom			=> $nom,
			prenom 	=> $prenom,
			email 	=> $addrlog,
		};

		if (defined $dinfo->{$sciper}) {
			$dinfo->{$sciper}->{accreds}->{$id_unite} = { sigle => $sigle, ordre => $ordre, };
		}
  }

}

#_____________
sub getAllUnits {
	my ($sigle) = @_;

	return unless $sigle;
	erreur ("unités de niveau 2, 3 ou 4 seulement") if $sigle eq 'EPFL' or $sigle eq 'epfl';
	my $sql = qq{SELECT sigle,id_unite,niveau from dinfo.unites1 where hierarchie like '% $sigle%' and date_fin = '0000-00-00 00:00:00' and (niveau = '4' or niveau = '3' or niveau = '2')};
	my $sth = $db_dinfo->query($sql);

	my @unites;
	while (my $data = $sth->fetchrow_hashref()) {
		next unless $data->{sigle};
		push (@unites, uc($data->{sigle}));
	}
#	erreur ("") if $count > 10;
	return (@unites);
}

#_____________
sub getUnitById {
	my ($id) = @_;

	return unless $id;
	my $sql = qq{SELECT sigle from dinfo.allunits where id_unite='$id'};
	my $sth = $db_dinfo->query($sql);
	my ($sigle) = $sth->fetchrow;
	return $sigle;
}

#________________________
sub ical {
	my $res_id = $CONTENTS{res_id};

	print qq{Content-Type: text/calendar; charset=utf-8\n\n};
	exit unless ($res_id) ;

    my %res 	 = getRes ($res_id);

	my $datedeb	= $res{datedeb}.'T'.$res{hdeb}.'00';
	my $datefin	= $res{datefin}.'T'.$res{hfin}.'00';

	$datedeb =~ s/h//g;
	$datefin =~ s/h//g;
	$datedeb =~ s/\-//g;
	$datefin =~ s/\-//g;

	my $dtstart = substr($datedeb,8,4) eq $start_day ? sprintf "DTSTART;TZID=Europe/Zurich;VALUE=DATE:%s",substr($datedeb,0,8) : sprintf "DTSTART;TZID=Europe/Zurich:%s", $datedeb;
	my $dtend;
	$dtend = sprintf "DTEND;TZID=Europe/Zurich;VALUE=DATE:%s", $datefin;

	my $uid		= 'res'.time().$ENV{REMOTE_ADDR}.$res{sciper} ;

	my $sum_txt = qq{EPFL Réservations : Salle : $allObjects->{$res{obj_id}}->{objdata}->{nom}, $dinfo->{$res{sciper}}->{nom} $dinfo->{$res{sciper}}->{prenom}};
	utf8::encode($sum_txt);
	
	my $periodic;
	unless ($res{periodic} eq 'ponctuelle') {
		$periodic = 'RRULE:FREQ=';
		$periodic .= 'DAILY;INTERVAL=1;'  if $res{periodic} eq 'quotidienne';
		$periodic .= 'WEEKLY;INTERVAL=2;' if ($res{periodic} eq 'toutes les deux semaines');
		$periodic .= 'WEEKLY;INTERVAL=3;' if ($res{periodic} eq 'toutes les trois semaines');
		$periodic .= 'WEEKLY;' if ($res{periodic} eq 'chaque');
		
		$periodic .= sprintf "UNTIL=%s", $datefin;

		my $datefin	= $res{datedeb}.'T'.$res{hfin}.'00';
		$datefin =~ s/h//g;
		$datefin =~ s/\-//g;

		$dtend 	   = sprintf "DTEND;TZID=Europe/Zurich:%s", $datefin;
#		$dtend='';
	}

	my $icaltxt = qq{BEGIN:VCALENDAR
PRODID:Gestion des réservations - VPSI
VERSION:2.0
BEGIN:VTIMEZONE
TZID:Europe/Zurich
BEGIN:DAYLIGHT
TZOFFSETFROM:+0100
RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU
DTSTART:19810329T020000
TZNAME:UTC+2
TZOFFSETTO:+0200
END:DAYLIGHT
BEGIN:STANDARD
TZOFFSETFROM:+0200
RRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU
DTSTART:19961027T030000
TZNAME:UTC+1
TZOFFSETTO:+0100
END:STANDARD
END:VTIMEZONE
BEGIN:VEVENT
$dtstart
};
	$icaltxt .= "$dtend\n" 		if $dtend;
	$icaltxt .= "$periodic\n" 	if $periodic;
	$icaltxt .= qq{SUMMARY:$sum_txt
UID:$uid
END:VEVENT
END:VCALENDAR
};	

	print qq{$icaltxt};
	
	exit;
	
}

#------
sub maj_token {
   erreur ("opération absente") unless $CONTENTS{op};
   unless ($superusers =~ /\b$CONTENTS{sciper}\b/) {
	   if ($CONTENTS{objID}) {
	   	erreur ("pas de droits de gestion pour cette ressource") unless exists $Admins->{$CONTENTS{sciper}}->{$CONTENTS{objID}};
	   } else {
	   	erreur ("pas de droits de gestion des objets de réservation") unless exists $Admins->{$CONTENTS{sciper}};
	   }
   }
   my $objTokens = get_obj_tokens ($CONTENTS{objID});

   if ($CONTENTS{op} eq 'del_all') {
		my $sql = qq{delete from tokens where obj_id=?};
		dbquery($sql, $CONTENTS{objID});

		logger ($CONTENTS{objID}, '', qq{del all tokens}) ; 
   }
   
   if ($CONTENTS{op} eq 'del') {
		erreur ("autorisation absente") unless $CONTENTS{tokenID};
   	erreur ("autorisation pas trouvée pour cette ressource") unless defined $objTokens->{$CONTENTS{tokenID}};
# 		my ($obj_id, $host) = getAuth ($CONTENTS{tokenID}, $CONTENTS{objID});
# 		erreur ("autorisation erronée") unless $CONTENTS{objID} eq $obj_id;

		my ($obj_id, $ts) = getObjIDFromToken ($CONTENTS{tokenID});
		erreur ( "wrong authorization for this ressource")  unless $obj_id eq $CONTENTS{objID};

		my $sql = qq{delete from tokens where obj_id=? and id=?};
		dbquery($sql, $CONTENTS{objID}, $CONTENTS{tokenID});

		logger ($CONTENTS{objID}, '', qq{del token $objTokens->{$CONTENTS{tokenID}}->{host}}) ; 
   }
   
   if ($CONTENTS{op} eq 'add') {
#		erreur ("adresse IP erronée") if  $IP_BASED_AUTH and ! chkEPFLIP ( $CONTENTS{host} );
		my $tokenID = makeToken ($CONTENTS{objID});
		my $sql = qq{insert into tokens set id=?, obj_id=?, rights=?};
		dbquery($sql, $tokenID, $CONTENTS{objID}, $CONTENTS{rights});

		logger ($CONTENTS{objID}, '', qq{add token : $CONTENTS{rights}}) ; 
   }
   
   print qq{
   	<script>
   	location.href="$URLres/cons_obj?objID=$CONTENTS{objID}";
   	</script>
   };
   
   ext;

}

#------
sub makeToken {
	my ($objID) = @_;
	return '' unless $objID;

	return makeTokenRC4($objID) if $useTokenRC4;
	return makeTokenGCM($objID) ;

}

#------
sub makeTokenRC4 {
	my ($objID) = @_;
	return '' unless $objID;

	my $rc4   = Crypt::RC4->new ($rc4key);
	open(RND, "/dev/urandom");
	my $tmpkey;
	my $rnd   = sysread(RND, $tmpkey, 6);
	close(RND);
	my $crypt_tmpkey = unpack ("H*", $rc4->RC4 ($tmpkey));
	$rc4 	  	= new Crypt::RC4 ($tmpkey);
	my $value = $objID . ':' . time();	
	
	return $crypt_tmpkey.unpack ("H*", $rc4->RC4 ($value));
}

#_________________
sub makeTokenGCM {
	my ($objID) = @_;
	return '' unless $objID;

	my $value = $objID . ':' . time();	
	my $iv  	= genrandomkey(12);
  my $gcm 	= Crypt::GCM->new (
       -key => pack ('H*', $aeskey),
    -cipher => 'Crypt::Rijndael',
  );
  $gcm->aad    ('');
  $gcm->set_iv ($iv);
  my $cipher 	= $gcm->encrypt ($value);
  my $tag 		= $gcm->tag;
  my $token 	= unpack ('H*', $cipher);
	   $token 	= $token.':'.unpack ('H*', $iv).':'.unpack ('H*', $tag);
  return $token;
  
}

#_________________
sub genrandomkey {
  my $len = shift || 16;
  my $rand;
  open (RND, "/dev/urandom") || die "Unable to init random engine : $!";
  if (sysread (RND, $rand, $len) != $len) { die "Unable to read random bytes : $!"; }
  close (RND);
  return $rand;
}

#_________________
sub getUserAccreds {
	my $sciper = $CONTENTS{sciper};
warn "--> getUserAccreds : $sciper\n";
	return unless $sciper;
	getUserData ($sciper) unless defined $dinfo->{$sciper}->{accreds};
	my $rettxt = qq{<select name="unite" >};
	foreach my $unit (keys %{$dinfo->{$sciper}->{accreds}}) {
		next unless $unit;
warn "  unit=$unit, sigle=$dinfo->{$sciper}->{accreds}->{$unit}->{sigle}\n";
		$rettxt .= qq{<option value="">$dinfo->{$sciper}->{accreds}->{$unit}->{sigle}</option>};
	}
	$rettxt .= qq{</select>};
	print $rettxt;
	exit;
}

#_________________
sub majCallBack {
	return unless $CONTENTS{objID};
	print qq{<b>Gestion des Call Back des réservations</b><br>};
	$CONTENTS{format} = 'json' 		unless $CONTENTS{format};

	erreur ("identificateur de ressource absent") unless $CONTENTS{objID};
	erreur ("pas de droits pour cette ressource") unless objAccessAllowed ($CONTENTS{objID});

	my $op;
	if ($CONTENTS{del}) {
		my $sql = qq{delete from call_backs where obj_id=?};
		dbquery($sql, $CONTENTS{objID});
		$op = 'del';		
	} else {
		erreur ("paramètres absents") unless $CONTENTS{objID} && $CONTENTS{descr} && $CONTENTS{url} && $CONTENTS{token};
		erreur ("format erroné") 			unless $CONTENTS{format} eq 'json' || $CONTENTS{format} eq 'text';
		erreur ("url erroné") 	 			unless $CONTENTS{url} =~ /^(http|https):\/\//;

		utf8::encode($CONTENTS{descr});

		my ($sql, @params);
		if ($CONTENTS{id}) {
			$sql = qq{update call_backs set obj_id=?, sciper=?, url=?, descr=?, token=?, format=?, active=? where id=?};
			@params = ($CONTENTS{objID}, $CONTENTS{sciper}, $CONTENTS{url}, $CONTENTS{descr}, $CONTENTS{token}, $CONTENTS{format}, $CONTENTS{active}, $CONTENTS{id});
			$op = 'updt';
		} else {
			$sql = qq{insert into call_backs set obj_id=?, sciper=?, url=?, descr=?, token=?, format=?, active=?};
			@params = ($CONTENTS{objID}, $CONTENTS{sciper}, $CONTENTS{url}, $CONTENTS{descr}, $CONTENTS{token}, $CONTENTS{format}, $CONTENTS{active});
			$op = 'add';
		}
		dbquery($sql, @params);
		logger ($CONTENTS{objID}, '', qq{$op callback}) ; 
	}
	print qq{Mise à jour callback<br>
	Opération: $op<br>
	<a href="$URLres/cons_obj?objID=$CONTENTS{objID}">Retour sur la page de la ressource</a>
	};
	&footpage();
}
#_________________
sub callBack {
	return unless $USE_CALLBACK;
	
	my $params = shift;
warn ">> callBack params ".Dumper($params);
	return { result => 'false', message => qq{paramètre callback action absent}} unless $params->{action};
warn "==>> callBack 0\n";
	return { result => 'false', message => qq{paramètre callback res absent}} 	 unless $params->{res};
warn "==>> callBack 1\n";
	my $objID = $params->{res}->{objID} ? $params->{res}->{objID} : $params->{res}->{obj_id};
	
	my %obj = getObj($objID);
	return { result => 'false', message => qq{objet de réservation pas trouvé}} unless %obj;
warn "==>> callBack 2\n";
	my $callback = getCallBack ($objID);
	return unless $callback && $callback->{active};
warn "==>> callBack 3\n";

	my $post = {
		action 		=> $params->{action},
		resID 		=> $params->{res}->{res_id},
		dates 		=> $params->{res}->{dates},
		hdeb 			=> $params->{res}->{hdeb},
		hfin 			=> $params->{res}->{hdeb},
		resNom 		=> $params->{res}->{nom},
		resDescr  => $params->{res}->{descr},
		objID		  => $objID,
		objNom	  => $obj{$objID}->{objdata}->{nom},
		objDescr  => $obj{$objID}->{objdata}->{descr},
		url 			=> $callback->{url},
		token 		=> $callback->{token},
		sciper 		=> $CONTENTS{sciper},
	};
print qq{<pre>callBack }.Dumper($post).'</pre>';

	#	- call back
	my $ua 		= LWP::UserAgent->new;
	my $response;
	eval {
		local $SIG{ALRM} = sub {
			die "callBack $objID timeout";
		}; 
		alarm 2;
		$response = $ua->post( $callback->{url}, $post, );
		alarm 0;
	};
	unless ($response->is_success) {
warn "==> callback KO: ".$response->status_line;
	} else {
warn "==> callback OK: ".$response->status_line;
#		$bottin_atela = decode_json($response->decoded_content);
	}


#	logger ($objID, $params->{res}->{res_id}, qq{ callback}) ; 

}
#_________________
sub getCallBack {
	my $objID = shift;
	return unless $objID;
	my $sql = qq{select * from call_backs where obj_id=?};
	my $sth = dbquery($sql, $objID);
	my $callback = $sth->fetchrow_hashref;
	return $callback ;
}

