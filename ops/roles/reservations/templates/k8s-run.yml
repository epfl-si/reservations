---

apiVersion: v1
kind: ConfigMap
metadata:
  name: reservations-config
  namespace: {{ openshift_namespace }}
data:
  E2EM_LINE: {{ "prod" if inventory_environment == "prod" else "preprod" }}
  MOCK_ORACLE: '{{ "1" if inventory_environment != "prod" else "0" }}'
  SITE_URL: {{ reservations_hostname }}
{% if inventory_environment != "prod" %}
  MOCK_EMAIL_TO: isas-fsd@groupes.epfl.ch
  TEQUILA_HOST: test-tequila.epfl.ch
  TOP_PAGE_BANNER: >-
    *** ATTENTION : vous êtes sur une version de TEST ***
{% endif %}

{# Note: since secrets use “temporary” Ansible variables, they are managed
   separately. See ../tasks/reservations-openshift-run-tasks.yml #}

---

apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: reservations
  name: reservations
  namespace: {{ openshift_namespace }}
spec:
  replicas: 1
  selector:
    app: reservations
  template:
    metadata:
      labels:
        app: reservations
    spec:
      containers:
        - name: reservations
          # `image` is managed by the `ImageChange` trigger, below.
          envFrom:
            - configMapRef:
                name: reservations-config
          imagePullPolicy: Always
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: reservations-secrets
              mountPath: /opt/dinfo/etc
            - name: reservations-secrets
              subPath: access_params
              mountPath: /var/www/vhosts/app/private/etc/access_params
      volumes:
            - name: reservations-secrets
              secret:
                secretName: reservations-secrets
  triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - reservations
        from:
          kind: ImageStreamTag
          namespace: {{ openshift_namespace }}
          name: 'reservations:{{ inventory_environment }}'
    - type: ConfigChange

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: reservations
  name: reservations
  namespace: {{ openshift_namespace }}
spec:
  type: ClusterIP
  ports:
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: reservations

---

apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: reservations
  namespace: {{ openshift_namespace }}
spec:
  host: {{ reservations_hostname }}
  port:
    targetPort: web
  tls:
    termination: edge
  to:
    kind: Service
    name: reservations
    weight: 100
  wildcardPolicy: None
